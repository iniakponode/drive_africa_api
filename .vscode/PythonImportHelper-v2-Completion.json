[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "command",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "mysql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "UUIDType",
        "importPath": "sqlalchemy_utils.types.uuid",
        "description": "sqlalchemy_utils.types.uuid",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils.types.uuid",
        "documentation": {}
    },
    {
        "label": "UUIDType",
        "importPath": "sqlalchemy_utils.types.uuid",
        "description": "sqlalchemy_utils.types.uuid",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils.types.uuid",
        "documentation": {}
    },
    {
        "label": "sqlalchemy_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "UUIDType",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "UUIDType",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "UUIDType",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "UUIDType",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "UUIDType",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "UUIDType",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "UUIDType",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "UUIDType",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "UUIDType",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "UUIDType",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "UUIDType",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "UUIDType",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "isExtraImport": true,
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Trip",
        "importPath": "safedrive.models.trip",
        "description": "safedrive.models.trip",
        "isExtraImport": true,
        "detail": "safedrive.models.trip",
        "documentation": {}
    },
    {
        "label": "Trip",
        "importPath": "safedrive.models.trip",
        "description": "safedrive.models.trip",
        "isExtraImport": true,
        "detail": "safedrive.models.trip",
        "documentation": {}
    },
    {
        "label": "Trip",
        "importPath": "safedrive.models.trip",
        "description": "safedrive.models.trip",
        "isExtraImport": true,
        "detail": "safedrive.models.trip",
        "documentation": {}
    },
    {
        "label": "Trip",
        "importPath": "safedrive.models.trip",
        "description": "safedrive.models.trip",
        "isExtraImport": true,
        "detail": "safedrive.models.trip",
        "documentation": {}
    },
    {
        "label": "Trip",
        "importPath": "safedrive.models.trip",
        "description": "safedrive.models.trip",
        "isExtraImport": true,
        "detail": "safedrive.models.trip",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviour",
        "importPath": "safedrive.models.unsafe_behaviour",
        "description": "safedrive.models.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.models.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviour",
        "importPath": "safedrive.models.unsafe_behaviour",
        "description": "safedrive.models.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.models.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviour",
        "importPath": "safedrive.models.unsafe_behaviour",
        "description": "safedrive.models.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.models.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviour",
        "importPath": "safedrive.models.unsafe_behaviour",
        "description": "safedrive.models.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.models.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "Location",
        "importPath": "safedrive.models.location",
        "description": "safedrive.models.location",
        "isExtraImport": true,
        "detail": "safedrive.models.location",
        "documentation": {}
    },
    {
        "label": "Location",
        "importPath": "safedrive.models.location",
        "description": "safedrive.models.location",
        "isExtraImport": true,
        "detail": "safedrive.models.location",
        "documentation": {}
    },
    {
        "label": "Location",
        "importPath": "safedrive.models.location",
        "description": "safedrive.models.location",
        "isExtraImport": true,
        "detail": "safedrive.models.location",
        "documentation": {}
    },
    {
        "label": "AIModelInput",
        "importPath": "safedrive.models.ai_model_input",
        "description": "safedrive.models.ai_model_input",
        "isExtraImport": true,
        "detail": "safedrive.models.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInput",
        "importPath": "safedrive.models.ai_model_input",
        "description": "safedrive.models.ai_model_input",
        "isExtraImport": true,
        "detail": "safedrive.models.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInput",
        "importPath": "safedrive.models.ai_model_input",
        "description": "safedrive.models.ai_model_input",
        "isExtraImport": true,
        "detail": "safedrive.models.ai_model_input",
        "documentation": {}
    },
    {
        "label": "DrivingTip",
        "importPath": "safedrive.models.driving_tip",
        "description": "safedrive.models.driving_tip",
        "isExtraImport": true,
        "detail": "safedrive.models.driving_tip",
        "documentation": {}
    },
    {
        "label": "DrivingTip",
        "importPath": "safedrive.models.driving_tip",
        "description": "safedrive.models.driving_tip",
        "isExtraImport": true,
        "detail": "safedrive.models.driving_tip",
        "documentation": {}
    },
    {
        "label": "DrivingTip",
        "importPath": "safedrive.models.driving_tip",
        "description": "safedrive.models.driving_tip",
        "isExtraImport": true,
        "detail": "safedrive.models.driving_tip",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "importPath": "safedrive.models.driving_tip",
        "description": "safedrive.models.driving_tip",
        "isExtraImport": true,
        "detail": "safedrive.models.driving_tip",
        "documentation": {}
    },
    {
        "label": "DriverProfile",
        "importPath": "safedrive.models.driver_profile",
        "description": "safedrive.models.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.models.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfile",
        "importPath": "safedrive.models.driver_profile",
        "description": "safedrive.models.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.models.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfile",
        "importPath": "safedrive.models.driver_profile",
        "description": "safedrive.models.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.models.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfile",
        "importPath": "safedrive.models.driver_profile",
        "description": "safedrive.models.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.models.driver_profile",
        "documentation": {}
    },
    {
        "label": "Cause",
        "importPath": "safedrive.models.cause",
        "description": "safedrive.models.cause",
        "isExtraImport": true,
        "detail": "safedrive.models.cause",
        "documentation": {}
    },
    {
        "label": "Cause",
        "importPath": "safedrive.models.cause",
        "description": "safedrive.models.cause",
        "isExtraImport": true,
        "detail": "safedrive.models.cause",
        "documentation": {}
    },
    {
        "label": "Cause",
        "importPath": "safedrive.models.cause",
        "description": "safedrive.models.cause",
        "isExtraImport": true,
        "detail": "safedrive.models.cause",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "importPath": "safedrive.models.cause",
        "description": "safedrive.models.cause",
        "isExtraImport": true,
        "detail": "safedrive.models.cause",
        "documentation": {}
    },
    {
        "label": "Embedding",
        "importPath": "safedrive.models.embedding",
        "description": "safedrive.models.embedding",
        "isExtraImport": true,
        "detail": "safedrive.models.embedding",
        "documentation": {}
    },
    {
        "label": "Embedding",
        "importPath": "safedrive.models.embedding",
        "description": "safedrive.models.embedding",
        "isExtraImport": true,
        "detail": "safedrive.models.embedding",
        "documentation": {}
    },
    {
        "label": "Embedding",
        "importPath": "safedrive.models.embedding",
        "description": "safedrive.models.embedding",
        "isExtraImport": true,
        "detail": "safedrive.models.embedding",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "importPath": "safedrive.models.embedding",
        "description": "safedrive.models.embedding",
        "isExtraImport": true,
        "detail": "safedrive.models.embedding",
        "documentation": {}
    },
    {
        "label": "NLGReport",
        "importPath": "safedrive.models.nlg_report",
        "description": "safedrive.models.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.models.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReport",
        "importPath": "safedrive.models.nlg_report",
        "description": "safedrive.models.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.models.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReport",
        "importPath": "safedrive.models.nlg_report",
        "description": "safedrive.models.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.models.nlg_report",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "importPath": "safedrive.models.nlg_report",
        "description": "safedrive.models.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.models.nlg_report",
        "documentation": {}
    },
    {
        "label": "RawSensorData",
        "importPath": "safedrive.models.raw_sensor_data",
        "description": "safedrive.models.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.models.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorData",
        "importPath": "safedrive.models.raw_sensor_data",
        "description": "safedrive.models.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.models.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorData",
        "importPath": "safedrive.models.raw_sensor_data",
        "description": "safedrive.models.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.models.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorData",
        "importPath": "safedrive.models.raw_sensor_data",
        "description": "safedrive.models.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.models.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorData",
        "importPath": "safedrive.models.raw_sensor_data",
        "description": "safedrive.models.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.models.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorData",
        "importPath": "safedrive.models.raw_sensor_data",
        "description": "safedrive.models.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.models.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "subqueryload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "object_session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "isExtraImport": true,
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "AIModelInputCreate",
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "isExtraImport": true,
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInputUpdate",
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "isExtraImport": true,
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInputResponse",
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "isExtraImport": true,
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInputCreate",
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "isExtraImport": true,
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInputUpdate",
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "isExtraImport": true,
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "ai_model_inputs_crud",
        "importPath": "safedrive.crud.ai_model_inputs",
        "description": "safedrive.crud.ai_model_inputs",
        "isExtraImport": true,
        "detail": "safedrive.crud.ai_model_inputs",
        "documentation": {}
    },
    {
        "label": "AlcoholQuestionnaireCreateSchema",
        "importPath": "safedrive.schemas.alcohol_questionnaire",
        "description": "safedrive.schemas.alcohol_questionnaire",
        "isExtraImport": true,
        "detail": "safedrive.schemas.alcohol_questionnaire",
        "documentation": {}
    },
    {
        "label": "AlcoholQuestionnaireResponseSchema",
        "importPath": "safedrive.schemas.alcohol_questionnaire",
        "description": "safedrive.schemas.alcohol_questionnaire",
        "isExtraImport": true,
        "detail": "safedrive.schemas.alcohol_questionnaire",
        "documentation": {}
    },
    {
        "label": "AlcoholQuestionnaireCreateSchema",
        "importPath": "safedrive.schemas.alcohol_questionnaire",
        "description": "safedrive.schemas.alcohol_questionnaire",
        "isExtraImport": true,
        "detail": "safedrive.schemas.alcohol_questionnaire",
        "documentation": {}
    },
    {
        "label": "AlcoholQuestionnaireResponseSchema",
        "importPath": "safedrive.schemas.alcohol_questionnaire",
        "description": "safedrive.schemas.alcohol_questionnaire",
        "isExtraImport": true,
        "detail": "safedrive.schemas.alcohol_questionnaire",
        "documentation": {}
    },
    {
        "label": "AlcoholQuestionnaireCRUD",
        "importPath": "safedrive.crud.alcohol_questionnaire",
        "description": "safedrive.crud.alcohol_questionnaire",
        "isExtraImport": true,
        "detail": "safedrive.crud.alcohol_questionnaire",
        "documentation": {}
    },
    {
        "label": "CauseCreate",
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "isExtraImport": true,
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "CauseUpdate",
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "isExtraImport": true,
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "CauseResponse",
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "isExtraImport": true,
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "CauseCreate",
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "isExtraImport": true,
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "CauseUpdate",
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "isExtraImport": true,
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "cause_crud",
        "importPath": "safedrive.crud.cause",
        "description": "safedrive.crud.cause",
        "isExtraImport": true,
        "detail": "safedrive.crud.cause",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "pymysql",
        "description": "pymysql",
        "isExtraImport": true,
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "pymysql",
        "description": "pymysql",
        "isExtraImport": true,
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "pymysql",
        "description": "pymysql",
        "isExtraImport": true,
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "pymysql",
        "description": "pymysql",
        "isExtraImport": true,
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "pymysql",
        "description": "pymysql",
        "isExtraImport": true,
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "pymysql",
        "description": "pymysql",
        "isExtraImport": true,
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "pymysql",
        "description": "pymysql",
        "isExtraImport": true,
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "DriverProfileCreate",
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfileOut",
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfileUpdate",
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfileResponse",
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfileCreate",
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfileUpdate",
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "driver_profile_crud",
        "importPath": "safedrive.crud.driver_profile",
        "description": "safedrive.crud.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.crud.driver_profile",
        "documentation": {}
    },
    {
        "label": "driver_profile_crud",
        "importPath": "safedrive.crud.driver_profile",
        "description": "safedrive.crud.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.crud.driver_profile",
        "documentation": {}
    },
    {
        "label": "driver_profile_crud",
        "importPath": "safedrive.crud.driver_profile",
        "description": "safedrive.crud.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.crud.driver_profile",
        "documentation": {}
    },
    {
        "label": "DrivingTipCreate",
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "DrivingTipUpdate",
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "DrivingTipResponse",
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "DrivingTipCreate",
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "DrivingTipUpdate",
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "isExtraImport": true,
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "driving_tip_crud",
        "importPath": "safedrive.crud.driving_tip",
        "description": "safedrive.crud.driving_tip",
        "isExtraImport": true,
        "detail": "safedrive.crud.driving_tip",
        "documentation": {}
    },
    {
        "label": "EmbeddingCreate",
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "isExtraImport": true,
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "EmbeddingUpdate",
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "isExtraImport": true,
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "EmbeddingResponse",
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "isExtraImport": true,
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "EmbeddingCreate",
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "isExtraImport": true,
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "EmbeddingUpdate",
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "isExtraImport": true,
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "embedding_crud",
        "importPath": "safedrive.crud.embedding",
        "description": "safedrive.crud.embedding",
        "isExtraImport": true,
        "detail": "safedrive.crud.embedding",
        "documentation": {}
    },
    {
        "label": "starlette.responses",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "LocationCreate",
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "isExtraImport": true,
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "LocationUpdate",
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "isExtraImport": true,
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "LocationResponse",
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "isExtraImport": true,
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "LocationCreate",
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "isExtraImport": true,
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "LocationUpdate",
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "isExtraImport": true,
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "location_crud",
        "importPath": "safedrive.crud.location",
        "description": "safedrive.crud.location",
        "isExtraImport": true,
        "detail": "safedrive.crud.location",
        "documentation": {}
    },
    {
        "label": "NLGReportCreate",
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReportUpdate",
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReportResponse",
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReportCreate",
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReportUpdate",
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "nlg_report_crud",
        "importPath": "safedrive.crud.nlg_report",
        "description": "safedrive.crud.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.crud.nlg_report",
        "documentation": {}
    },
    {
        "label": "RawSensorDataCreate",
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorDataUpdate",
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorDataResponse",
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorDataCreate",
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorDataUpdate",
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorDataOut",
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "raw_sensor_data_crud",
        "importPath": "safedrive.crud.raw_sensor_data",
        "description": "safedrive.crud.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.crud.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RoadCreate",
        "importPath": "safedrive.schemas.road",
        "description": "safedrive.schemas.road",
        "isExtraImport": true,
        "detail": "safedrive.schemas.road",
        "documentation": {}
    },
    {
        "label": "RoadUpdate",
        "importPath": "safedrive.schemas.road",
        "description": "safedrive.schemas.road",
        "isExtraImport": true,
        "detail": "safedrive.schemas.road",
        "documentation": {}
    },
    {
        "label": "RoadResponse",
        "importPath": "safedrive.schemas.road",
        "description": "safedrive.schemas.road",
        "isExtraImport": true,
        "detail": "safedrive.schemas.road",
        "documentation": {}
    },
    {
        "label": "RoadCreate",
        "importPath": "safedrive.schemas.road",
        "description": "safedrive.schemas.road",
        "isExtraImport": true,
        "detail": "safedrive.schemas.road",
        "documentation": {}
    },
    {
        "label": "RoadUpdate",
        "importPath": "safedrive.schemas.road",
        "description": "safedrive.schemas.road",
        "isExtraImport": true,
        "detail": "safedrive.schemas.road",
        "documentation": {}
    },
    {
        "label": "crud_road",
        "importPath": "safedrive.crud.road",
        "description": "safedrive.crud.road",
        "isExtraImport": true,
        "detail": "safedrive.crud.road",
        "documentation": {}
    },
    {
        "label": "trip_crud",
        "importPath": "safedrive.crud.trip",
        "description": "safedrive.crud.trip",
        "isExtraImport": true,
        "detail": "safedrive.crud.trip",
        "documentation": {}
    },
    {
        "label": "TripCreate",
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "isExtraImport": true,
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "TripUpdate",
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "isExtraImport": true,
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "TripResponse",
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "isExtraImport": true,
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "TripCreate",
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "isExtraImport": true,
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "TripUpdate",
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "isExtraImport": true,
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "TripOut",
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "isExtraImport": true,
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourCreate",
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourUpdate",
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourResponse",
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourCreate",
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourUpdate",
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "unsafe_behaviour_crud",
        "importPath": "safedrive.crud.unsafe_behaviour",
        "description": "safedrive.crud.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.crud.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "isExtraImport": true,
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "safedrive.api.v1.endpoints.index",
        "description": "safedrive.api.v1.endpoints.index",
        "isExtraImport": true,
        "detail": "safedrive.api.v1.endpoints.index",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "isExtraImport": true,
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "isExtraImport": true,
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "isExtraImport": true,
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "safedrive.api.v1.endpoints.driving_tips",
        "description": "safedrive.api.v1.endpoints.driving_tips",
        "isExtraImport": true,
        "detail": "safedrive.api.v1.endpoints.driving_tips",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "safedrive.api.v1.endpoints.cause",
        "description": "safedrive.api.v1.endpoints.cause",
        "isExtraImport": true,
        "detail": "safedrive.api.v1.endpoints.cause",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "safedrive.api.v1.endpoints.embedding",
        "description": "safedrive.api.v1.endpoints.embedding",
        "isExtraImport": true,
        "detail": "safedrive.api.v1.endpoints.embedding",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "safedrive.api.v1.endpoints.nlg_report",
        "description": "safedrive.api.v1.endpoints.nlg_report",
        "isExtraImport": true,
        "detail": "safedrive.api.v1.endpoints.nlg_report",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "isExtraImport": true,
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "isExtraImport": true,
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "safedrive.api.v1.endpoints.alcohol_questionnaire",
        "description": "safedrive.api.v1.endpoints.alcohol_questionnaire",
        "isExtraImport": true,
        "detail": "safedrive.api.v1.endpoints.alcohol_questionnaire",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "AlcoholQuestionnaire",
        "importPath": "safedrive.models.alcohol_questionnaire",
        "description": "safedrive.models.alcohol_questionnaire",
        "isExtraImport": true,
        "detail": "safedrive.models.alcohol_questionnaire",
        "documentation": {}
    },
    {
        "label": "Road",
        "importPath": "safedrive.models.road",
        "description": "safedrive.models.road",
        "isExtraImport": true,
        "detail": "safedrive.models.road",
        "documentation": {}
    },
    {
        "label": "dotenv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dotenv",
        "description": "dotenv",
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy.dialects.mysql",
        "description": "sqlalchemy.dialects.mysql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.mysql",
        "documentation": {}
    },
    {
        "label": "BINARY",
        "importPath": "sqlalchemy.dialects.mysql",
        "description": "sqlalchemy.dialects.mysql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.mysql",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "safe_drive_africa_api_router",
        "importPath": "safedrive",
        "description": "safedrive",
        "isExtraImport": true,
        "detail": "safedrive",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "alembic.config",
        "description": "alembic.config",
        "isExtraImport": true,
        "detail": "alembic.config",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.391abecaf0e0_added_speedlimit_to_location_model",
        "description": "alembic.versions.391abecaf0e0_added_speedlimit_to_location_model",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('location', sa.Column('speedLimit', sa.Float(), nullable=False))\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('location', 'speedLimit')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.391abecaf0e0_added_speedlimit_to_location_model",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.391abecaf0e0_added_speedlimit_to_location_model",
        "description": "alembic.versions.391abecaf0e0_added_speedlimit_to_location_model",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('location', 'speedLimit')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.391abecaf0e0_added_speedlimit_to_location_model",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.3f37686ddcb9_update_sync_feidl_in_all_models",
        "description": "alembic.versions.3f37686ddcb9_update_sync_feidl_in_all_models",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('ai_model_inputs', sa.Column('sync', sa.Boolean(), nullable=False))\n    op.drop_column('ai_model_inputs', 'synced')\n    op.add_column('alcohol_questionnaire', sa.Column('sync', sa.Boolean(), nullable=False))\n    op.add_column('nlg_report', sa.Column('sync', sa.Boolean(), nullable=False))\n    op.drop_column('nlg_report', 'synced')\n    op.add_column('roads', sa.Column('sync', sa.Boolean(), nullable=False))\n    op.add_column('trip', sa.Column('sync', sa.Boolean(), nullable=False))\n    op.drop_column('trip', 'synced')",
        "detail": "alembic.versions.3f37686ddcb9_update_sync_feidl_in_all_models",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.3f37686ddcb9_update_sync_feidl_in_all_models",
        "description": "alembic.versions.3f37686ddcb9_update_sync_feidl_in_all_models",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('unsafe_behaviour', sa.Column('synced', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True))\n    op.drop_column('unsafe_behaviour', 'sync')\n    op.add_column('trip', sa.Column('synced', mysql.TINYINT(display_width=1), autoincrement=False, nullable=False))\n    op.drop_column('trip', 'sync')\n    op.drop_column('roads', 'sync')\n    op.add_column('nlg_report', sa.Column('synced', mysql.TINYINT(display_width=1), autoincrement=False, nullable=False))\n    op.drop_column('nlg_report', 'sync')\n    op.drop_column('alcohol_questionnaire', 'sync')",
        "detail": "alembic.versions.3f37686ddcb9_update_sync_feidl_in_all_models",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.408ff5ca4b2b_added_road_api_code",
        "description": "alembic.versions.408ff5ca4b2b_added_road_api_code",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('roads',\n    sa.Column('id', UUIDType(), nullable=False),\n    sa.Column('driverProfileId', UUIDType(), nullable=False),\n    sa.Column('name', sa.String(length=255), nullable=False),\n    sa.Column('roadType', sa.String(length=100), nullable=False),\n    sa.Column('speedLimit', sa.Integer(), nullable=False),\n    sa.Column('latitude', sa.Float(), nullable=False),\n    sa.Column('longitude', sa.Float(), nullable=False),",
        "detail": "alembic.versions.408ff5ca4b2b_added_road_api_code",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.408ff5ca4b2b_added_road_api_code",
        "description": "alembic.versions.408ff5ca4b2b_added_road_api_code",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('roads')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.408ff5ca4b2b_added_road_api_code",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.4951d9a0fb5c_added_radius_to_road_model",
        "description": "alembic.versions.4951d9a0fb5c_added_radius_to_road_model",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('roads', sa.Column('radius', sa.Float(), nullable=False))\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('roads', 'radius')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.4951d9a0fb5c_added_radius_to_road_model",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.4951d9a0fb5c_added_radius_to_road_model",
        "description": "alembic.versions.4951d9a0fb5c_added_radius_to_road_model",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('roads', 'radius')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.4951d9a0fb5c_added_radius_to_road_model",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.50e7147a2977_added_date_field_into_alcohol_",
        "description": "alembic.versions.50e7147a2977_added_date_field_into_alcohol_",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('alcohol_questionnaire', sa.Column('date', sa.DateTime(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('alcohol_questionnaire', 'date')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.50e7147a2977_added_date_field_into_alcohol_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.50e7147a2977_added_date_field_into_alcohol_",
        "description": "alembic.versions.50e7147a2977_added_date_field_into_alcohol_",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('alcohol_questionnaire', 'date')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.50e7147a2977_added_date_field_into_alcohol_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.5345e3d93918_added_alcohol",
        "description": "alembic.versions.5345e3d93918_added_alcohol",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.5345e3d93918_added_alcohol",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.5345e3d93918_added_alcohol",
        "description": "alembic.versions.5345e3d93918_added_alcohol",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.5345e3d93918_added_alcohol",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.54ff87bff66e_change_alcohol_questionnaire_model_",
        "description": "alembic.versions.54ff87bff66e_change_alcohol_questionnaire_model_",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.54ff87bff66e_change_alcohol_questionnaire_model_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.54ff87bff66e_change_alcohol_questionnaire_model_",
        "description": "alembic.versions.54ff87bff66e_change_alcohol_questionnaire_model_",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.54ff87bff66e_change_alcohol_questionnaire_model_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.61044d328713_mad_datefeild_of_questionnaire_nullable",
        "description": "alembic.versions.61044d328713_mad_datefeild_of_questionnaire_nullable",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column('driving_tips', 'date',\n               existing_type=sa.DATE(),\n               type_=sa.DateTime(),\n               existing_nullable=False)\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column('driving_tips', 'date',",
        "detail": "alembic.versions.61044d328713_mad_datefeild_of_questionnaire_nullable",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.61044d328713_mad_datefeild_of_questionnaire_nullable",
        "description": "alembic.versions.61044d328713_mad_datefeild_of_questionnaire_nullable",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column('driving_tips', 'date',\n               existing_type=sa.DateTime(),\n               type_=sa.DATE(),\n               existing_nullable=False)\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.61044d328713_mad_datefeild_of_questionnaire_nullable",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.9c6105106ad6_remodelled_all_uuid_fields_to_be_",
        "description": "alembic.versions.9c6105106ad6_remodelled_all_uuid_fields_to_be_",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('driver_profile',\n    sa.Column('driverProfileId', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),\n    sa.Column('email', sa.String(length=50), nullable=False),\n    sa.Column('sync', sa.Boolean(), nullable=False),\n    sa.PrimaryKeyConstraint('driverProfileId'),\n    sa.UniqueConstraint('email')\n    )\n    op.create_table('embedding',",
        "detail": "alembic.versions.9c6105106ad6_remodelled_all_uuid_fields_to_be_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.9c6105106ad6_remodelled_all_uuid_fields_to_be_",
        "description": "alembic.versions.9c6105106ad6_remodelled_all_uuid_fields_to_be_",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('causes')\n    op.drop_table('unsafe_behaviour')\n    op.drop_table('raw_sensor_data')\n    op.drop_table('ai_model_inputs')\n    op.drop_table('trip')\n    op.drop_table('nlg_report')\n    op.drop_table('driving_tips')\n    op.drop_table('location')",
        "detail": "alembic.versions.9c6105106ad6_remodelled_all_uuid_fields_to_be_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.9fee028b17c3_created_mapper_from_driverprofile_to_",
        "description": "alembic.versions.9fee028b17c3_created_mapper_from_driverprofile_to_",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.9fee028b17c3_created_mapper_from_driverprofile_to_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.9fee028b17c3_created_mapper_from_driverprofile_to_",
        "description": "alembic.versions.9fee028b17c3_created_mapper_from_driverprofile_to_",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.9fee028b17c3_created_mapper_from_driverprofile_to_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.b3076df7bfa5_corrected_wrong_base_imports_in_",
        "description": "alembic.versions.b3076df7bfa5_corrected_wrong_base_imports_in_",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('alcohol_questionnaire',\n    sa.Column('id', UUIDType(), nullable=False),\n    sa.Column('driverProfileId', UUIDType(), nullable=False),\n    sa.Column('drankAlcohol', sa.Boolean(), nullable=False),\n    sa.Column('selectedAlcoholTypes', sa.Text(), nullable=False),\n    sa.Column('beerQuantity', sa.String(length=255), nullable=False),\n    sa.Column('wineQuantity', sa.String(length=255), nullable=False),\n    sa.Column('spiritsQuantity', sa.String(length=255), nullable=False),",
        "detail": "alembic.versions.b3076df7bfa5_corrected_wrong_base_imports_in_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.b3076df7bfa5_corrected_wrong_base_imports_in_",
        "description": "alembic.versions.b3076df7bfa5_corrected_wrong_base_imports_in_",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('alcohol_questionnaire')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.b3076df7bfa5_corrected_wrong_base_imports_in_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.ba5ad2d9bb18_change_alcohol_questionnaire_model_",
        "description": "alembic.versions.ba5ad2d9bb18_change_alcohol_questionnaire_model_",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.ba5ad2d9bb18_change_alcohol_questionnaire_model_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.ba5ad2d9bb18_change_alcohol_questionnaire_model_",
        "description": "alembic.versions.ba5ad2d9bb18_change_alcohol_questionnaire_model_",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.ba5ad2d9bb18_change_alcohol_questionnaire_model_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.da45a384a8ac_changed_driving_tips_date_type_to_",
        "description": "alembic.versions.da45a384a8ac_changed_driving_tips_date_type_to_",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_constraint('raw_sensor_data_ibfk_2', 'raw_sensor_data', type_='foreignkey')\n    op.create_foreign_key(None, 'raw_sensor_data', 'trip', ['trip_id'], ['id'], ondelete='CASCADE')\n    op.drop_constraint('trip_ibfk_1', 'trip', type_='foreignkey')\n    op.create_foreign_key(None, 'trip', 'driver_profile', ['driverProfileId'], ['driverProfileId'], ondelete='CASCADE')\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_constraint(None, 'trip', type_='foreignkey')",
        "detail": "alembic.versions.da45a384a8ac_changed_driving_tips_date_type_to_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.da45a384a8ac_changed_driving_tips_date_type_to_",
        "description": "alembic.versions.da45a384a8ac_changed_driving_tips_date_type_to_",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_constraint(None, 'trip', type_='foreignkey')\n    op.create_foreign_key('trip_ibfk_1', 'trip', 'driver_profile', ['driverProfileId'], ['driverProfileId'])\n    op.drop_constraint(None, 'raw_sensor_data', type_='foreignkey')\n    op.create_foreign_key('raw_sensor_data_ibfk_2', 'raw_sensor_data', 'trip', ['trip_id'], ['id'])\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.da45a384a8ac_changed_driving_tips_date_type_to_",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = Base.metadata",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "safedrive.alembic.env",
        "description": "safedrive.alembic.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url, target_metadata=target_metadata, literal_binds=True\n    )\n    with context.begin_transaction():\n        context.run_migrations()\ndef run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\"\"\"",
        "detail": "safedrive.alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "safedrive.alembic.env",
        "description": "safedrive.alembic.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\"\"\"\n    connectable = create_engine(database_url, poolclass=pool.NullPool)\n    with connectable.connect() as connection:\n        context.configure(connection=connection, target_metadata=target_metadata)\n        with context.begin_transaction():\n            context.run_migrations()\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:",
        "detail": "safedrive.alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "safedrive.alembic.env",
        "description": "safedrive.alembic.env",
        "peekOfCode": "config = context.config\n# Set database URL from environment\ndatabase_url = os.getenv('DATABASE_URL')\nif not database_url:\n    raise RuntimeError(\"DATABASE_URL environment variable is not set.\")\nconfig.set_main_option('sqlalchemy.url', database_url)\n# Interpret config file for logging\nfileConfig(config.config_file_name)\n# MetaData for 'autogenerate' support\ntarget_metadata = Base.metadata",
        "detail": "safedrive.alembic.env",
        "documentation": {}
    },
    {
        "label": "database_url",
        "kind": 5,
        "importPath": "safedrive.alembic.env",
        "description": "safedrive.alembic.env",
        "peekOfCode": "database_url = os.getenv('DATABASE_URL')\nif not database_url:\n    raise RuntimeError(\"DATABASE_URL environment variable is not set.\")\nconfig.set_main_option('sqlalchemy.url', database_url)\n# Interpret config file for logging\nfileConfig(config.config_file_name)\n# MetaData for 'autogenerate' support\ntarget_metadata = Base.metadata\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\"\"\"",
        "detail": "safedrive.alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "safedrive.alembic.env",
        "description": "safedrive.alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url, target_metadata=target_metadata, literal_binds=True\n    )\n    with context.begin_transaction():\n        context.run_migrations()\ndef run_migrations_online():",
        "detail": "safedrive.alembic.env",
        "documentation": {}
    },
    {
        "label": "create_ai_model_input",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "def create_ai_model_input(\n    *,\n    db: Session = Depends(get_db),\n    input_in: AIModelInputCreate,\n) -> AIModelInputResponse:\n    \"\"\"\n    Create a new AI model input.\n    - **trip_id**: The ID of the trip associated with this AI model input.\n    - **timestamp**: Timestamp of the AI model input.\n    - **date**: Date of the AI model input.",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "get_ai_model_input",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "def get_ai_model_input(\n    input_id: UUID,\n    db: Session = Depends(get_db),\n) -> AIModelInputResponse:\n    \"\"\"\n    Retrieve an AI model input by ID.\n    - **input_id**: The ID of the AI model input to retrieve.\n    \"\"\"\n    try:\n        ai_model_input = ai_model_inputs_crud.get(db=db, id=input_id)",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "get_all_ai_model_inputs",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "def get_all_ai_model_inputs(\n    skip: int = 0,\n    limit: int = 20,\n    db: Session = Depends(get_db),\n) -> List[AIModelInputResponse]:\n    \"\"\"\n    Retrieve all AI model inputs with optional pagination.\n    - **skip**: Number of records to skip.\n    - **limit**: Maximum number of records to retrieve (max 100).\n    \"\"\"",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "update_ai_model_input",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "def update_ai_model_input(\n    input_id: UUID,\n    *,\n    db: Session = Depends(get_db),\n    input_in: AIModelInputUpdate,\n) -> AIModelInputResponse:\n    \"\"\"\n    Update an existing AI model input.\n    - **input_id**: The ID of the AI model input to update.\n    - **input_in**: The updated data.",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "delete_ai_model_input",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "def delete_ai_model_input(\n    input_id: UUID,\n    db: Session = Depends(get_db),\n) -> AIModelInputResponse:\n    \"\"\"\n    Delete an AI model input by ID.\n    - **input_id**: The ID of the AI model input to delete.\n    \"\"\"\n    try:\n        ai_model_input = ai_model_inputs_crud.get(db=db, id=input_id)",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "batch_create_ai_model_inputs",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "def batch_create_ai_model_inputs(data: List[AIModelInputCreate], db: Session = Depends(get_db)):\n    try:\n        created_inputs = ai_model_inputs_crud.batch_create(db=db, data_in=data)\n        return {\"message\": f\"{len(created_inputs)} AIModelInput records created.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch create AIModelInput: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch creation failed.\")\n@router.delete(\"/ai_model_inputs/batch_delete\", status_code=204)\ndef batch_delete_ai_model_inputs(ids: List[UUID], db: Session = Depends(get_db)):\n    try:",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "batch_delete_ai_model_inputs",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "def batch_delete_ai_model_inputs(ids: List[UUID], db: Session = Depends(get_db)):\n    try:\n        ai_model_inputs_crud.batch_delete(db=db, ids=ids)\n        return {\"message\": f\"{len(ids)} AIModelInput records deleted.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch delete AIModelInput: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch deletion failed.\")",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nrouter = APIRouter()\n# Endpoint to create a new AI model input\n@router.post(\"/ai_model_inputs/\", response_model=AIModelInputResponse)\ndef create_ai_model_input(\n    *,\n    db: Session = Depends(get_db),\n    input_in: AIModelInputCreate,\n) -> AIModelInputResponse:",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "description": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "peekOfCode": "router = APIRouter()\n# Endpoint to create a new AI model input\n@router.post(\"/ai_model_inputs/\", response_model=AIModelInputResponse)\ndef create_ai_model_input(\n    *,\n    db: Session = Depends(get_db),\n    input_in: AIModelInputCreate,\n) -> AIModelInputResponse:\n    \"\"\"\n    Create a new AI model input.",
        "detail": "safedrive.api.v1.endpoints.ai_model_inputs_router",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.alcohol_questionnaire",
        "description": "safedrive.api.v1.endpoints.alcohol_questionnaire",
        "peekOfCode": "router = APIRouter()\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nhandler = logging.StreamHandler()\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\n# Endpoint to submit a new alcohol questionnaire\n@router.post(\"/questionnaire/\", response_model=AlcoholQuestionnaireResponseSchema)\nasync def submit_alcohol_questionnaire(",
        "detail": "safedrive.api.v1.endpoints.alcohol_questionnaire",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.alcohol_questionnaire",
        "description": "safedrive.api.v1.endpoints.alcohol_questionnaire",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nhandler = logging.StreamHandler()\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\n# Endpoint to submit a new alcohol questionnaire\n@router.post(\"/questionnaire/\", response_model=AlcoholQuestionnaireResponseSchema)\nasync def submit_alcohol_questionnaire(\n    questionnaire_data: AlcoholQuestionnaireCreateSchema,",
        "detail": "safedrive.api.v1.endpoints.alcohol_questionnaire",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.alcohol_questionnaire",
        "description": "safedrive.api.v1.endpoints.alcohol_questionnaire",
        "peekOfCode": "handler = logging.StreamHandler()\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\n# Endpoint to submit a new alcohol questionnaire\n@router.post(\"/questionnaire/\", response_model=AlcoholQuestionnaireResponseSchema)\nasync def submit_alcohol_questionnaire(\n    questionnaire_data: AlcoholQuestionnaireCreateSchema,\n    db: Session = Depends(get_db),\n):",
        "detail": "safedrive.api.v1.endpoints.alcohol_questionnaire",
        "documentation": {}
    },
    {
        "label": "formatter",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.alcohol_questionnaire",
        "description": "safedrive.api.v1.endpoints.alcohol_questionnaire",
        "peekOfCode": "formatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\n# Endpoint to submit a new alcohol questionnaire\n@router.post(\"/questionnaire/\", response_model=AlcoholQuestionnaireResponseSchema)\nasync def submit_alcohol_questionnaire(\n    questionnaire_data: AlcoholQuestionnaireCreateSchema,\n    db: Session = Depends(get_db),\n):\n    try:",
        "detail": "safedrive.api.v1.endpoints.alcohol_questionnaire",
        "documentation": {}
    },
    {
        "label": "create_cause",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.cause",
        "description": "safedrive.api.v1.endpoints.cause",
        "peekOfCode": "def create_cause(*, db: Session = Depends(get_db), cause_in: CauseCreate) -> CauseResponse:\n    try:\n        new_cause = cause_crud.create(db=db, obj_in=cause_in)\n        logger.info(f\"Created Cause with ID: {new_cause.id}\")\n        return CauseResponse(id=new_cause.id_uuid, **cause_in.dict())\n    except Exception as e:\n        logger.error(f\"Error creating Cause: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Error creating cause\")\n@router.get(\"/causes/{cause_id}\", response_model=CauseResponse)\ndef get_cause(cause_id: UUID, db: Session = Depends(get_db)) -> CauseResponse:",
        "detail": "safedrive.api.v1.endpoints.cause",
        "documentation": {}
    },
    {
        "label": "get_cause",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.cause",
        "description": "safedrive.api.v1.endpoints.cause",
        "peekOfCode": "def get_cause(cause_id: UUID, db: Session = Depends(get_db)) -> CauseResponse:\n    cause = cause_crud.get(db=db, id=cause_id)\n    if not cause:\n        logger.warning(f\"Cause with ID {cause_id} not found.\")\n        raise HTTPException(status_code=404, detail=\"Cause not found\")\n    return CauseResponse.model_validate(cause)\n@router.get(\"/causes/\", response_model=List[CauseResponse])\ndef get_all_causes(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[CauseResponse]:\n    causes = cause_crud.get_all(db=db, skip=skip, limit=limit)\n    logger.info(f\"Retrieved {len(causes)} Causes.\")",
        "detail": "safedrive.api.v1.endpoints.cause",
        "documentation": {}
    },
    {
        "label": "get_all_causes",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.cause",
        "description": "safedrive.api.v1.endpoints.cause",
        "peekOfCode": "def get_all_causes(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[CauseResponse]:\n    causes = cause_crud.get_all(db=db, skip=skip, limit=limit)\n    logger.info(f\"Retrieved {len(causes)} Causes.\")\n    return [CauseResponse.model_validate(cause) for cause in causes]\n@router.put(\"/causes/{cause_id}\", response_model=CauseResponse)\ndef update_cause(cause_id: UUID, *, db: Session = Depends(get_db), cause_in: CauseUpdate) -> CauseResponse:\n    cause = cause_crud.get(db=db, id=cause_id)\n    if not cause:\n        logger.warning(f\"Cause with ID {cause_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"Cause not found\")",
        "detail": "safedrive.api.v1.endpoints.cause",
        "documentation": {}
    },
    {
        "label": "update_cause",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.cause",
        "description": "safedrive.api.v1.endpoints.cause",
        "peekOfCode": "def update_cause(cause_id: UUID, *, db: Session = Depends(get_db), cause_in: CauseUpdate) -> CauseResponse:\n    cause = cause_crud.get(db=db, id=cause_id)\n    if not cause:\n        logger.warning(f\"Cause with ID {cause_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"Cause not found\")\n    updated_cause = cause_crud.update(db=db, db_obj=cause, obj_in=cause_in)\n    logger.info(f\"Updated Cause with ID: {cause_id}\")\n    return CauseResponse.model_validate(updated_cause)\n@router.delete(\"/causes/{cause_id}\", response_model=CauseResponse)\ndef delete_cause(cause_id: UUID, db: Session = Depends(get_db)) -> CauseResponse:",
        "detail": "safedrive.api.v1.endpoints.cause",
        "documentation": {}
    },
    {
        "label": "delete_cause",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.cause",
        "description": "safedrive.api.v1.endpoints.cause",
        "peekOfCode": "def delete_cause(cause_id: UUID, db: Session = Depends(get_db)) -> CauseResponse:\n    cause = cause_crud.get(db=db, id=cause_id)\n    if not cause:\n        logger.warning(f\"Cause with ID {cause_id} not found for deletion.\")\n        raise HTTPException(status_code=404, detail=\"Cause not found\")\n    deleted_cause = cause_crud.delete(db=db, id=cause_id)\n    logger.info(f\"Deleted Cause with ID: {cause_id}\")\n    return CauseResponse.model_validate(deleted_cause)",
        "detail": "safedrive.api.v1.endpoints.cause",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.cause",
        "description": "safedrive.api.v1.endpoints.cause",
        "peekOfCode": "router = APIRouter()\nlogger = logging.getLogger(__name__)\n@router.post(\"/causes/\", response_model=CauseResponse)\ndef create_cause(*, db: Session = Depends(get_db), cause_in: CauseCreate) -> CauseResponse:\n    try:\n        new_cause = cause_crud.create(db=db, obj_in=cause_in)\n        logger.info(f\"Created Cause with ID: {new_cause.id}\")\n        return CauseResponse(id=new_cause.id_uuid, **cause_in.dict())\n    except Exception as e:\n        logger.error(f\"Error creating Cause: {str(e)}\")",
        "detail": "safedrive.api.v1.endpoints.cause",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.cause",
        "description": "safedrive.api.v1.endpoints.cause",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@router.post(\"/causes/\", response_model=CauseResponse)\ndef create_cause(*, db: Session = Depends(get_db), cause_in: CauseCreate) -> CauseResponse:\n    try:\n        new_cause = cause_crud.create(db=db, obj_in=cause_in)\n        logger.info(f\"Created Cause with ID: {new_cause.id}\")\n        return CauseResponse(id=new_cause.id_uuid, **cause_in.dict())\n    except Exception as e:\n        logger.error(f\"Error creating Cause: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Error creating cause\")",
        "detail": "safedrive.api.v1.endpoints.cause",
        "documentation": {}
    },
    {
        "label": "create_driver_profile",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "def create_driver_profile(\n    *,\n    db: Session = Depends(get_db),\n    profile_in: DriverProfileCreate\n) -> DriverProfileResponse:\n    \"\"\"\n    Creates a new driver profile, or returns the existing one if there's a duplicate email.\n    \"\"\"\n    # No `try/except IntegrityError` block here, because CRUD function handles it.\n    new_profile = driver_profile_crud.create(db=db, obj_in=profile_in)",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "batch_create_driver_profiles",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "def batch_create_driver_profiles(\n    *,\n    db: Session = Depends(get_db),\n    profiles_in: List[DriverProfileCreate]\n) -> List[DriverProfileResponse]:\n    try:\n        # Use bulk creation for all profiles at once\n        new_profiles = driver_profile_crud.batch_create(db=db, objs_in=profiles_in)\n        if not new_profiles:\n            raise HTTPException(",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "get_driver_profile",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "def get_driver_profile(profile_id: UUID, db: Session = Depends(get_db)) -> DriverProfileResponse:\n    profile = driver_profile_crud.get(db=db, id=profile_id)\n    if not profile:\n        logger.warning(f\"DriverProfile with ID {profile_id} not found.\")\n        raise HTTPException(status_code=404, detail=\"Driver profile not found\")\n    logger.info(f\"Retrieved DriverProfile with ID: {profile_id}\")\n    return DriverProfileResponse(driverProfileId=profile.id_uuid, email=profile.email, sync=profile.sync)\n@router.get(\"/driver-profiles/by-profile-id/{email}\", response_model=DriverProfileOut)\ndef get_driver_profile_by_email(\n    email: str,",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "get_driver_profile_by_email",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "def get_driver_profile_by_email(\n    email: str,\n    db: Session = Depends(get_db),\n    limit_sensor_data: int = 5000\n):\n    driver_profile = (\n        db.query(DriverProfile)\n        .filter(DriverProfile.email == email)\n        .options(subqueryload(DriverProfile.trips))  # load trips eagerly\n        .one_or_none()",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "get_driver_profile_by_email",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "def get_driver_profile_by_email(\n    email: str,\n    db: Session = Depends(get_db),\n    limit_sensor_data: int = 5000\n):\n    # 1) Get the driver profile + eager load trips\n    driver_profile = (\n        db.query(DriverProfile)\n        .filter(DriverProfile.email == email)\n        .options(subqueryload(DriverProfile.trips))  # optional eager load",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "get_driver_profile_by_email",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "def get_driver_profile_by_email( email: str, db: Session = Depends(get_db), limit: int = 1):\n    # 1) Get the driver profile + eager load trips\n    driver_profile = (\n        db.query(DriverProfile)\n        .filter(DriverProfile.email == email)\n    )\n    if not driver_profile:\n        raise HTTPException(status_code=404, detail=\"DriverProfile not found.\")\n    return DriverProfileResponse.model_validate(driver_profile)\n@router.get(\"/driver_profiles/\", response_model=List[DriverProfileResponse])",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "get_all_driver_profiles",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "def get_all_driver_profiles(skip: int = 0, limit: int = 5000, db: Session = Depends(get_db)) -> List[DriverProfileResponse]:\n    profiles = driver_profile_crud.get_all(db=db, skip=skip, limit=limit)\n    logger.info(f\"Retrieved {len(profiles)} DriverProfiles.\")\n    return [DriverProfileResponse(driverProfileId=profile.id_uuid, email=profile.email, sync=profile.sync) for profile in profiles]\n@router.put(\"/driver_profiles/{profile_id}\", response_model=DriverProfileResponse)\ndef update_driver_profile(profile_id: UUID, *, db: Session = Depends(get_db), profile_in: DriverProfileUpdate) -> DriverProfileResponse:\n    profile = driver_profile_crud.get(db=db, id=profile_id)\n    if not profile:\n        logger.warning(f\"DriverProfile with ID {profile_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"Driver profile not found\")",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "update_driver_profile",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "def update_driver_profile(profile_id: UUID, *, db: Session = Depends(get_db), profile_in: DriverProfileUpdate) -> DriverProfileResponse:\n    profile = driver_profile_crud.get(db=db, id=profile_id)\n    if not profile:\n        logger.warning(f\"DriverProfile with ID {profile_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"Driver profile not found\")\n    updated_profile = driver_profile_crud.update(db=db, db_obj=profile, obj_in=profile_in)\n    logger.info(f\"Updated DriverProfile with ID: {profile_id}\")\n    return DriverProfileResponse(driverProfileId=updated_profile.id_uuid, email=updated_profile.email, sync=updated_profile.sync)\n@router.delete(\"/driver_profiles/{profile_id}\", response_model=DriverProfileResponse)\ndef delete_driver_profile(profile_id: UUID, db: Session = Depends(get_db)) -> DriverProfileResponse:",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "delete_driver_profile",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "def delete_driver_profile(profile_id: UUID, db: Session = Depends(get_db)) -> DriverProfileResponse:\n    profile = driver_profile_crud.get(db=db, id=profile_id)\n    if not profile:\n        logger.warning(f\"DriverProfile with ID {profile_id} not found for deletion.\")\n        raise HTTPException(status_code=404, detail=\"Driver profile not found\")\n    deleted_profile = driver_profile_crud.delete(db=db, id=profile_id)\n    logger.info(f\"Deleted DriverProfile with ID: {profile_id}\")\n    return DriverProfileResponse(driverProfileId=deleted_profile.id_uuid, email=deleted_profile.email, sync=deleted_profile.sync)\n@router.delete(\"/driver_profiles/by-profile-id/{email}\", response_model=DriverProfileResponse)\ndef delete_driver_profile_by_email(",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "delete_driver_profile_by_email",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "def delete_driver_profile_by_email(\n    email: str,\n    db: Session = Depends(get_db),\n) -> DriverProfileResponse:\n    \"\"\"\n    Deletes a driver profile (by email) and all related child records.\n    Returns the deleted driver profile data.\n    \"\"\"\n    deleted_profile = driver_profile_crud.delete_by_email_cascade(db, email)\n    if not deleted_profile:",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "router = APIRouter()\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nhandler = logging.StreamHandler()\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\n@router.post(\"/driver_profiles/\", response_model=DriverProfileResponse)\ndef create_driver_profile(\n    *,",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nhandler = logging.StreamHandler()\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\n@router.post(\"/driver_profiles/\", response_model=DriverProfileResponse)\ndef create_driver_profile(\n    *,\n    db: Session = Depends(get_db),",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "handler = logging.StreamHandler()\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\n@router.post(\"/driver_profiles/\", response_model=DriverProfileResponse)\ndef create_driver_profile(\n    *,\n    db: Session = Depends(get_db),\n    profile_in: DriverProfileCreate\n) -> DriverProfileResponse:",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "formatter",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.driver_profile",
        "description": "safedrive.api.v1.endpoints.driver_profile",
        "peekOfCode": "formatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\n@router.post(\"/driver_profiles/\", response_model=DriverProfileResponse)\ndef create_driver_profile(\n    *,\n    db: Session = Depends(get_db),\n    profile_in: DriverProfileCreate\n) -> DriverProfileResponse:\n    \"\"\"",
        "detail": "safedrive.api.v1.endpoints.driver_profile",
        "documentation": {}
    },
    {
        "label": "create_driving_tip",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driving_tips",
        "description": "safedrive.api.v1.endpoints.driving_tips",
        "peekOfCode": "def create_driving_tip(*, db: Session = Depends(get_db), tip_in: DrivingTipCreate) -> DrivingTipResponse:\n    try:\n        new_tip = driving_tip_crud.create(db=db, obj_in=tip_in)\n        logger.info(f\"Created DrivingTip with ID: {new_tip.tip_id}\")\n        return DrivingTipResponse(**tip_in.model_dump())\n    except ValueError as e:\n        logger.error(f\"Validation error while creating DrivingTip: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))\n    except Exception as e:\n        logger.error(f\"Unexpected error while creating DrivingTip: {str(e)}\")",
        "detail": "safedrive.api.v1.endpoints.driving_tips",
        "documentation": {}
    },
    {
        "label": "get_driving_tip",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driving_tips",
        "description": "safedrive.api.v1.endpoints.driving_tips",
        "peekOfCode": "def get_driving_tip(tip_id: UUID, db: Session = Depends(get_db)) -> DrivingTipResponse:\n    try:\n        tip = driving_tip_crud.get(db=db, id=tip_id)\n        if not tip:\n            logger.warning(f\"DrivingTip with ID {tip_id} not found.\")\n            raise HTTPException(status_code=404, detail=\"Driving tip not found\")\n         # Convert SQLAlchemy objects to Pydantic response models\n        return  DrivingTipResponse(\n                tip_id=tip.tip_id,\n                title=tip.title,",
        "detail": "safedrive.api.v1.endpoints.driving_tips",
        "documentation": {}
    },
    {
        "label": "get_all_driving_tips",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driving_tips",
        "description": "safedrive.api.v1.endpoints.driving_tips",
        "peekOfCode": "def get_all_driving_tips(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[DrivingTipResponse]:\n    try:\n        tips = driving_tip_crud.get_all(db=db, skip=skip, limit=limit)\n        logger.info(f\"Retrieved {len(tips)} DrivingTips.\")\n        # Convert SQLAlchemy objects to Pydantic response models\n        return [\n            DrivingTipResponse(\n                tip_id=tip.tip_id,\n                title=tip.title,\n                meaning=tip.meaning,",
        "detail": "safedrive.api.v1.endpoints.driving_tips",
        "documentation": {}
    },
    {
        "label": "update_driving_tip",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driving_tips",
        "description": "safedrive.api.v1.endpoints.driving_tips",
        "peekOfCode": "def update_driving_tip(tip_id: UUID, *, db: Session = Depends(get_db), tip_in: DrivingTipUpdate) -> DrivingTipResponse:\n    tip = driving_tip_crud.get(db=db, id=tip_id)\n    if not tip:\n        logger.warning(f\"DrivingTip with ID {tip_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"Driving tip not found\")\n    try:\n        updated_tip = driving_tip_crud.update(db=db, db_obj=tip, obj_in=tip_in)\n        logger.info(f\"Updated DrivingTip with ID: {tip_id}\")\n        return DrivingTipResponse(tip_id=updated_tip.tip_id, **tip_in.dict())\n    except ValueError as e:",
        "detail": "safedrive.api.v1.endpoints.driving_tips",
        "documentation": {}
    },
    {
        "label": "delete_driving_tip",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.driving_tips",
        "description": "safedrive.api.v1.endpoints.driving_tips",
        "peekOfCode": "def delete_driving_tip(tip_id: UUID, db: Session = Depends(get_db)) -> DrivingTipResponse:\n    tip = driving_tip_crud.get(db=db, id=tip_id)\n    if not tip:\n        logger.warning(f\"DrivingTip with ID {tip_id} not found for deletion.\")\n        raise HTTPException(status_code=404, detail=\"Driving tip not found\")\n    try:\n        deleted_tip = driving_tip_crud.delete(db=db, id=tip_id)\n        logger.info(f\"Deleted DrivingTip with ID: {tip_id}\")\n        return DrivingTipResponse(tip_id=deleted_tip.tip_id, \n                                  title=deleted_tip.title, ",
        "detail": "safedrive.api.v1.endpoints.driving_tips",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.driving_tips",
        "description": "safedrive.api.v1.endpoints.driving_tips",
        "peekOfCode": "router = APIRouter()\nlogger = logging.getLogger(__name__)\n@router.post(\"/driving_tips/\", response_model=DrivingTipResponse)\ndef create_driving_tip(*, db: Session = Depends(get_db), tip_in: DrivingTipCreate) -> DrivingTipResponse:\n    try:\n        new_tip = driving_tip_crud.create(db=db, obj_in=tip_in)\n        logger.info(f\"Created DrivingTip with ID: {new_tip.tip_id}\")\n        return DrivingTipResponse(**tip_in.model_dump())\n    except ValueError as e:\n        logger.error(f\"Validation error while creating DrivingTip: {str(e)}\")",
        "detail": "safedrive.api.v1.endpoints.driving_tips",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.driving_tips",
        "description": "safedrive.api.v1.endpoints.driving_tips",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@router.post(\"/driving_tips/\", response_model=DrivingTipResponse)\ndef create_driving_tip(*, db: Session = Depends(get_db), tip_in: DrivingTipCreate) -> DrivingTipResponse:\n    try:\n        new_tip = driving_tip_crud.create(db=db, obj_in=tip_in)\n        logger.info(f\"Created DrivingTip with ID: {new_tip.tip_id}\")\n        return DrivingTipResponse(**tip_in.model_dump())\n    except ValueError as e:\n        logger.error(f\"Validation error while creating DrivingTip: {str(e)}\")\n        raise HTTPException(status_code=400, detail=str(e))",
        "detail": "safedrive.api.v1.endpoints.driving_tips",
        "documentation": {}
    },
    {
        "label": "create_embedding",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.embedding",
        "description": "safedrive.api.v1.endpoints.embedding",
        "peekOfCode": "def create_embedding(*, db: Session = Depends(get_db), embedding_in: EmbeddingCreate) -> EmbeddingResponse:\n    try:\n        new_embedding = embedding_crud.create(db=db, obj_in=embedding_in)\n        logger.info(f\"Created Embedding with ID: {new_embedding.chunk_id.hex()}\")\n        return EmbeddingResponse(chunk_id=new_embedding.id_uuid, **embedding_in.dict(), created_at=new_embedding.created_at)\n    except Exception as e:\n        logger.error(f\"Error creating Embedding: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Error creating embedding\")\n@router.get(\"/embeddings/{embedding_id}\", response_model=EmbeddingResponse)\ndef get_embedding(embedding_id: UUID, db: Session = Depends(get_db)) -> EmbeddingResponse:",
        "detail": "safedrive.api.v1.endpoints.embedding",
        "documentation": {}
    },
    {
        "label": "get_embedding",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.embedding",
        "description": "safedrive.api.v1.endpoints.embedding",
        "peekOfCode": "def get_embedding(embedding_id: UUID, db: Session = Depends(get_db)) -> EmbeddingResponse:\n    embedding = embedding_crud.get(db=db, id=embedding_id)\n    if not embedding:\n        logger.warning(f\"Embedding with ID {embedding_id} not found.\")\n        raise HTTPException(status_code=404, detail=\"Embedding not found\")\n    logger.info(f\"Retrieved Embedding with ID: {embedding_id}\")\n    return EmbeddingResponse(chunk_id=embedding.id_uuid, chunk_text=embedding.chunk_text, embedding=embedding.embedding, source_type=embedding.source_type, source_page=embedding.source_page, created_at=embedding.created_at)\n@router.get(\"/embeddings/\", response_model=List[EmbeddingResponse])\ndef get_all_embeddings(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[EmbeddingResponse]:\n    embeddings = embedding_crud.get_all(db=db, skip=skip, limit=limit)",
        "detail": "safedrive.api.v1.endpoints.embedding",
        "documentation": {}
    },
    {
        "label": "get_all_embeddings",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.embedding",
        "description": "safedrive.api.v1.endpoints.embedding",
        "peekOfCode": "def get_all_embeddings(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[EmbeddingResponse]:\n    embeddings = embedding_crud.get_all(db=db, skip=skip, limit=limit)\n    logger.info(f\"Retrieved {len(embeddings)} Embeddings.\")\n    return [EmbeddingResponse(chunk_id=embed.id_uuid, chunk_text=embed.chunk_text, embedding=embed.embedding, source_type=embed.source_type, source_page=embed.source_page, created_at=embed.created_at) for embed in embeddings]\n@router.put(\"/embeddings/{embedding_id}\", response_model=EmbeddingResponse)\ndef update_embedding(embedding_id: UUID, *, db: Session = Depends(get_db), embedding_in: EmbeddingUpdate) -> EmbeddingResponse:\n    embedding = embedding_crud.get(db=db, id=embedding_id)\n    if not embedding:\n        logger.warning(f\"Embedding with ID {embedding_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"Embedding not found\")",
        "detail": "safedrive.api.v1.endpoints.embedding",
        "documentation": {}
    },
    {
        "label": "update_embedding",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.embedding",
        "description": "safedrive.api.v1.endpoints.embedding",
        "peekOfCode": "def update_embedding(embedding_id: UUID, *, db: Session = Depends(get_db), embedding_in: EmbeddingUpdate) -> EmbeddingResponse:\n    embedding = embedding_crud.get(db=db, id=embedding_id)\n    if not embedding:\n        logger.warning(f\"Embedding with ID {embedding_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"Embedding not found\")\n    updated_embedding = embedding_crud.update(db=db, db_obj=embedding, obj_in=embedding_in)\n    logger.info(f\"Updated Embedding with ID: {embedding_id}\")\n    return EmbeddingResponse(chunk_id=updated_embedding.id_uuid, chunk_text=updated_embedding.chunk_text, embedding=updated_embedding.embedding, source_type=updated_embedding.source_type, source_page=updated_embedding.source_page, created_at=updated_embedding.created_at)\n@router.delete(\"/embeddings/{embedding_id}\", response_model=EmbeddingResponse)\ndef delete_embedding(embedding_id: UUID, db: Session = Depends(get_db)) -> EmbeddingResponse:",
        "detail": "safedrive.api.v1.endpoints.embedding",
        "documentation": {}
    },
    {
        "label": "delete_embedding",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.embedding",
        "description": "safedrive.api.v1.endpoints.embedding",
        "peekOfCode": "def delete_embedding(embedding_id: UUID, db: Session = Depends(get_db)) -> EmbeddingResponse:\n    embedding = embedding_crud.get(db=db, id=embedding_id)\n    if not embedding:\n        logger.warning(f\"Embedding with ID {embedding_id} not found for deletion.\")\n        raise HTTPException(status_code=404, detail=\"Embedding not found\")\n    deleted_embedding = embedding_crud.delete(db=db, id=embedding_id)\n    logger.info(f\"Deleted Embedding with ID: {embedding_id}\")\n    return EmbeddingResponse(chunk_id=deleted_embedding.id_uuid, chunk_text=deleted_embedding.chunk_text, embedding=deleted_embedding.embedding, source_type=deleted_embedding.source_type, source_page=deleted_embedding.source_page, created_at=deleted_embedding.created_at)",
        "detail": "safedrive.api.v1.endpoints.embedding",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.embedding",
        "description": "safedrive.api.v1.endpoints.embedding",
        "peekOfCode": "router = APIRouter()\nlogger = logging.getLogger(__name__)\n@router.post(\"/embeddings/\", response_model=EmbeddingResponse)\ndef create_embedding(*, db: Session = Depends(get_db), embedding_in: EmbeddingCreate) -> EmbeddingResponse:\n    try:\n        new_embedding = embedding_crud.create(db=db, obj_in=embedding_in)\n        logger.info(f\"Created Embedding with ID: {new_embedding.chunk_id.hex()}\")\n        return EmbeddingResponse(chunk_id=new_embedding.id_uuid, **embedding_in.dict(), created_at=new_embedding.created_at)\n    except Exception as e:\n        logger.error(f\"Error creating Embedding: {str(e)}\")",
        "detail": "safedrive.api.v1.endpoints.embedding",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.embedding",
        "description": "safedrive.api.v1.endpoints.embedding",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@router.post(\"/embeddings/\", response_model=EmbeddingResponse)\ndef create_embedding(*, db: Session = Depends(get_db), embedding_in: EmbeddingCreate) -> EmbeddingResponse:\n    try:\n        new_embedding = embedding_crud.create(db=db, obj_in=embedding_in)\n        logger.info(f\"Created Embedding with ID: {new_embedding.chunk_id.hex()}\")\n        return EmbeddingResponse(chunk_id=new_embedding.id_uuid, **embedding_in.dict(), created_at=new_embedding.created_at)\n    except Exception as e:\n        logger.error(f\"Error creating Embedding: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Error creating embedding\")",
        "detail": "safedrive.api.v1.endpoints.embedding",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.index",
        "description": "safedrive.api.v1.endpoints.index",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/\")\nasync def root():\n    return _responses.RedirectResponse(\"/docs\")\n# async def index():\n#     \"\"\"\n#     Provides an overview of all available endpoints in the Safe Drive Africa API.\n#     \"\"\"\n#     return {\n#         \"message\": \"Welcome to the Safe Drive Africa API\",",
        "detail": "safedrive.api.v1.endpoints.index",
        "documentation": {}
    },
    {
        "label": "create_location",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "def create_location(\n    *,\n    db: Session = Depends(get_db),\n    location_in: LocationCreate,\n) -> LocationResponse:\n    \"\"\"\n    Create a new location.\n    - **latitude**: Latitude of the location.\n    - **longitude**: Longitude of the location.\n    - **timestamp**: Timestamp when the location was recorded.",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "get_location",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "def get_location(\n    location_id: UUID,\n    db: Session = Depends(get_db),\n) -> LocationResponse:\n    \"\"\"\n    Retrieve a location by ID.\n    - **location_id**: The UUID of the location to retrieve.\n    \"\"\"\n    try:\n        location = location_crud.get(db=db, id=location_id)",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "get_all_locations",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "def get_all_locations(\n    skip: int = 0,\n    limit: int = 20,\n    db: Session = Depends(get_db),\n) -> List[LocationResponse]:\n    \"\"\"\n    Retrieve all locations with optional pagination.\n    - **skip**: Number of records to skip.\n    - **limit**: Maximum number of records to retrieve (max 100).\n    \"\"\"",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "update_location",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "def update_location(\n    location_id: UUID,\n    *,\n    db: Session = Depends(get_db),\n    location_in: LocationUpdate,\n) -> LocationResponse:\n    \"\"\"\n    Update an existing location.\n    - **location_id**: The UUID of the location to update.\n    - **location_in**: The updated data.",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "delete_location",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "def delete_location(\n    location_id: UUID,\n    db: Session = Depends(get_db),\n) -> LocationResponse:\n    \"\"\"\n    Delete a location by ID.\n    - **location_id**: The UUID of the location to delete.\n    \"\"\"\n    try:\n        location = location_crud.get(db=db, id=location_id)",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "batch_create_locations",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "def batch_create_locations(data: List[LocationCreate], db: Session = Depends(get_db)):\n    try:\n        created_locations = location_crud.batch_create(db=db, data_in=data)\n        return {\"message\": f\"{len(created_locations)} Location records created.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch create Location: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch creation failed.\")\n@router.delete(\"/locations/batch_delete\", status_code=204)\ndef batch_delete_locations(ids: List[UUID], db: Session = Depends(get_db)):\n    try:",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "batch_delete_locations",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "def batch_delete_locations(ids: List[UUID], db: Session = Depends(get_db)):\n    try:\n        location_crud.batch_delete(db=db, ids=ids)\n        return {\"message\": f\"{len(ids)} Location records deleted.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch delete Location: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch deletion failed.\")",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nrouter = APIRouter()\n@router.post(\"/locations/\", response_model=LocationResponse)\ndef create_location(\n    *,\n    db: Session = Depends(get_db),\n    location_in: LocationCreate,\n) -> LocationResponse:\n    \"\"\"",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.location",
        "description": "safedrive.api.v1.endpoints.location",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/locations/\", response_model=LocationResponse)\ndef create_location(\n    *,\n    db: Session = Depends(get_db),\n    location_in: LocationCreate,\n) -> LocationResponse:\n    \"\"\"\n    Create a new location.\n    - **latitude**: Latitude of the location.",
        "detail": "safedrive.api.v1.endpoints.location",
        "documentation": {}
    },
    {
        "label": "create_nlg_report",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.nlg_report",
        "description": "safedrive.api.v1.endpoints.nlg_report",
        "peekOfCode": "def create_nlg_report(*, db: Session = Depends(get_db), report_in: NLGReportCreate) -> NLGReportResponse:\n    try:\n        new_report = nlg_report_crud.create(db=db, obj_in=report_in)\n        logger.info(f\"Created NLGReport with ID: {new_report.id}\")\n        return NLGReportResponse.model_validate(new_report)\n    except Exception as e:\n        logger.error(f\"Error creating NLGReport: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Error creating NLG report\")\n@router.get(\"/nlg_reports/{report_id}\", response_model=NLGReportResponse)\ndef get_nlg_report(report_id: UUID, db: Session = Depends(get_db)) -> NLGReportResponse:",
        "detail": "safedrive.api.v1.endpoints.nlg_report",
        "documentation": {}
    },
    {
        "label": "get_nlg_report",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.nlg_report",
        "description": "safedrive.api.v1.endpoints.nlg_report",
        "peekOfCode": "def get_nlg_report(report_id: UUID, db: Session = Depends(get_db)) -> NLGReportResponse:\n    report = nlg_report_crud.get(db=db, id=report_id)\n    if not report:\n        logger.warning(f\"NLGReport with ID {report_id} not found.\")\n        raise HTTPException(status_code=404, detail=\"NLG report not found\")\n    return NLGReportResponse(id=report.id_uuid, driverProfileId=report.driverProfileId, report_text=report.report_text, generated_at=report.generated_at, synced=report.synced)\n@router.get(\"/nlg_reports/\", response_model=List[NLGReportResponse])\ndef get_all_nlg_reports(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[NLGReportResponse]:\n    reports = nlg_report_crud.get_all(db=db, skip=skip, limit=limit)\n    logger.info(f\"Retrieved {len(reports)} NLGReports.\")",
        "detail": "safedrive.api.v1.endpoints.nlg_report",
        "documentation": {}
    },
    {
        "label": "get_all_nlg_reports",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.nlg_report",
        "description": "safedrive.api.v1.endpoints.nlg_report",
        "peekOfCode": "def get_all_nlg_reports(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[NLGReportResponse]:\n    reports = nlg_report_crud.get_all(db=db, skip=skip, limit=limit)\n    logger.info(f\"Retrieved {len(reports)} NLGReports.\")\n    return [NLGReportResponse(id=report.id_uuid, driverProfileId=report.driverProfileId, report_text=report.report_text, generated_at=report.generated_at, synced=report.synced) for report in reports]\n@router.put(\"/nlg_reports/{report_id}\", response_model=NLGReportResponse)\ndef update_nlg_report(report_id: UUID, *, db: Session = Depends(get_db), report_in: NLGReportUpdate) -> NLGReportResponse:\n    report = nlg_report_crud.get(db=db, id=report_id)\n    if not report:\n        logger.warning(f\"NLGReport with ID {report_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"NLG report not found\")",
        "detail": "safedrive.api.v1.endpoints.nlg_report",
        "documentation": {}
    },
    {
        "label": "update_nlg_report",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.nlg_report",
        "description": "safedrive.api.v1.endpoints.nlg_report",
        "peekOfCode": "def update_nlg_report(report_id: UUID, *, db: Session = Depends(get_db), report_in: NLGReportUpdate) -> NLGReportResponse:\n    report = nlg_report_crud.get(db=db, id=report_id)\n    if not report:\n        logger.warning(f\"NLGReport with ID {report_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"NLG report not found\")\n    updated_report = nlg_report_crud.update(db=db, db_obj=report, obj_in=report_in)\n    logger.info(f\"Updated NLGReport with ID: {report_id}\")\n    return NLGReportResponse(id=updated_report.id_uuid, driverProfileId=updated_report.driverProfileId, report_text=updated_report.report_text, generated_at=updated_report.generated_at, synced=updated_report.synced)\n@router.delete(\"/nlg_reports/{report_id}\", response_model=NLGReportResponse)\ndef delete_nlg_report(report_id: UUID, db: Session = Depends(get_db)) -> NLGReportResponse:",
        "detail": "safedrive.api.v1.endpoints.nlg_report",
        "documentation": {}
    },
    {
        "label": "delete_nlg_report",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.nlg_report",
        "description": "safedrive.api.v1.endpoints.nlg_report",
        "peekOfCode": "def delete_nlg_report(report_id: UUID, db: Session = Depends(get_db)) -> NLGReportResponse:\n    report = nlg_report_crud.get(db=db, id=report_id)\n    if not report:\n        logger.warning(f\"NLGReport with ID {report_id} not found for deletion.\")\n        raise HTTPException(status_code=404, detail=\"NLG report not found\")\n    deleted_report = nlg_report_crud.delete(db=db, id=report_id)\n    logger.info(f\"Deleted NLGReport with ID: {report_id}\")\n    return NLGReportResponse(id=deleted_report.id_uuid, driverProfileId=deleted_report.driverProfileId, report_text=deleted_report.report_text, generated_at=deleted_report.generated_at, synced=deleted_report.synced)",
        "detail": "safedrive.api.v1.endpoints.nlg_report",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.nlg_report",
        "description": "safedrive.api.v1.endpoints.nlg_report",
        "peekOfCode": "router = APIRouter()\nlogger = logging.getLogger(__name__)\n@router.post(\"/nlg_reports/\", response_model=NLGReportResponse)\ndef create_nlg_report(*, db: Session = Depends(get_db), report_in: NLGReportCreate) -> NLGReportResponse:\n    try:\n        new_report = nlg_report_crud.create(db=db, obj_in=report_in)\n        logger.info(f\"Created NLGReport with ID: {new_report.id}\")\n        return NLGReportResponse.model_validate(new_report)\n    except Exception as e:\n        logger.error(f\"Error creating NLGReport: {str(e)}\")",
        "detail": "safedrive.api.v1.endpoints.nlg_report",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.nlg_report",
        "description": "safedrive.api.v1.endpoints.nlg_report",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@router.post(\"/nlg_reports/\", response_model=NLGReportResponse)\ndef create_nlg_report(*, db: Session = Depends(get_db), report_in: NLGReportCreate) -> NLGReportResponse:\n    try:\n        new_report = nlg_report_crud.create(db=db, obj_in=report_in)\n        logger.info(f\"Created NLGReport with ID: {new_report.id}\")\n        return NLGReportResponse.model_validate(new_report)\n    except Exception as e:\n        logger.error(f\"Error creating NLGReport: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Error creating NLG report\")",
        "detail": "safedrive.api.v1.endpoints.nlg_report",
        "documentation": {}
    },
    {
        "label": "create_raw_sensor_data",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "def create_raw_sensor_data(\n    *,\n    db: Session = Depends(get_db),\n    raw_data_in: RawSensorDataCreate,\n) -> RawSensorDataResponse:\n    \"\"\"\n    Create a new raw sensor data entry.\n    - **sensor_type_name**: Name of the sensor type.\n    - **timestamp**: Timestamp of the sensor reading.\n    - **other fields**: Additional required fields.",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "get_raw_sensor_data",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "def get_raw_sensor_data(\n    data_id: UUID,\n    db: Session = Depends(get_db),\n) -> RawSensorDataResponse:\n    \"\"\"\n    Retrieve a raw sensor data entry by ID.\n    - **data_id**: The UUID of the raw sensor data to retrieve.\n    \"\"\"\n    try:\n        raw_data = raw_sensor_data_crud.get(db=db, id=data_id)",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "get_all_raw_sensor_data",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "def get_all_raw_sensor_data(\n    skip: int = 0,\n    limit: int = 5000,\n    db: Session = Depends(get_db),\n) -> List[RawSensorDataResponse]:\n    \"\"\"\n    Retrieve all raw sensor data entries with optional pagination.\n    - **skip**: Number of records to skip.\n    - **limit**: Maximum number of records to retrieve (max 100).\n    \"\"\"",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "update_raw_sensor_data",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "def update_raw_sensor_data(\n    data_id: UUID,\n    *,\n    db: Session = Depends(get_db),\n    raw_data_in: RawSensorDataUpdate,\n) -> RawSensorDataResponse:\n    \"\"\"\n    Update an existing raw sensor data entry.\n    - **data_id**: The UUID of the raw sensor data to update.\n    - **raw_data_in**: The updated data.",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "delete_raw_sensor_data",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "def delete_raw_sensor_data(\n    data_id: UUID,\n    db: Session = Depends(get_db),\n) -> RawSensorDataResponse:\n    \"\"\"\n    Delete a raw sensor data entry by ID.\n    - **data_id**: The UUID of the raw sensor data to delete.\n    \"\"\"\n    try:\n        raw_data = raw_sensor_data_crud.get(db=db, id=data_id)",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "batch_create_raw_sensor_data",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "def batch_create_raw_sensor_data(data: List[RawSensorDataCreate], db: Session = Depends(get_db)):\n    try:\n        created_data = raw_sensor_data_crud.batch_create(db=db, data_in=data)\n        return {\"message\": f\"{len(created_data)} RawSensorData records created.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch create RawSensorData: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch creation failed.\")\n@router.delete(\"/raw_sensor_data/batch_delete\", status_code=204)\ndef batch_delete_raw_sensor_data(ids: List[UUID], db: Session = Depends(get_db)):\n    try:",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "batch_delete_raw_sensor_data",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "def batch_delete_raw_sensor_data(ids: List[UUID], db: Session = Depends(get_db)):\n    try:\n        raw_sensor_data_crud.batch_delete(db=db, ids=ids)\n        return {\"message\": f\"{len(ids)} RawSensorData records deleted.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch delete RawSensorData: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch deletion failed.\")",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nrouter = APIRouter()\n@router.post(\"/raw_sensor_data/\", response_model=RawSensorDataResponse)\ndef create_raw_sensor_data(\n    *,\n    db: Session = Depends(get_db),\n    raw_data_in: RawSensorDataCreate,\n) -> RawSensorDataResponse:\n    \"\"\"",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.raw_sensor_data",
        "description": "safedrive.api.v1.endpoints.raw_sensor_data",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/raw_sensor_data/\", response_model=RawSensorDataResponse)\ndef create_raw_sensor_data(\n    *,\n    db: Session = Depends(get_db),\n    raw_data_in: RawSensorDataCreate,\n) -> RawSensorDataResponse:\n    \"\"\"\n    Create a new raw sensor data entry.\n    - **sensor_type_name**: Name of the sensor type.",
        "detail": "safedrive.api.v1.endpoints.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "create_road",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.road",
        "description": "safedrive.api.v1.endpoints.road",
        "peekOfCode": "def create_road(*, db: Session = Depends(get_db), road_in: RoadCreate) -> RoadResponse:\n    try:\n        new_road = crud_road.create(db=db, obj_in=road_in)\n        logger.info(f\"Created Road with ID: {new_road.id}\")\n        return RoadResponse.from_orm(new_road)\n    except Exception as e:\n        logger.error(f\"Error creating Road: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Error creating road\")\n@router.get(\"/roads/{road_id}\", response_model=RoadResponse)\ndef get_road(road_id: UUID, db: Session = Depends(get_db)) -> RoadResponse:",
        "detail": "safedrive.api.v1.endpoints.road",
        "documentation": {}
    },
    {
        "label": "get_road",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.road",
        "description": "safedrive.api.v1.endpoints.road",
        "peekOfCode": "def get_road(road_id: UUID, db: Session = Depends(get_db)) -> RoadResponse:\n    road = crud_road.get(db=db, id=road_id)\n    if not road:\n        logger.warning(f\"Road with ID {road_id} not found.\")\n        raise HTTPException(status_code=404, detail=\"Road not found\")\n    return RoadResponse.from_orm(road)\n@router.get(\"/roads/\", response_model=List[RoadResponse])\ndef get_all_roads(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[RoadResponse]:\n    roads = crud_road.get_all(db=db, skip=skip, limit=limit)\n    logger.info(f\"Retrieved {len(roads)} Roads.\")",
        "detail": "safedrive.api.v1.endpoints.road",
        "documentation": {}
    },
    {
        "label": "get_all_roads",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.road",
        "description": "safedrive.api.v1.endpoints.road",
        "peekOfCode": "def get_all_roads(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)) -> List[RoadResponse]:\n    roads = crud_road.get_all(db=db, skip=skip, limit=limit)\n    logger.info(f\"Retrieved {len(roads)} Roads.\")\n    return [RoadResponse.from_orm(road) for road in roads]\n@router.put(\"/roads/{road_id}\", response_model=RoadResponse)\ndef update_road(road_id: UUID, *, db: Session = Depends(get_db), road_in: RoadUpdate) -> RoadResponse:\n    road = crud_road.get(db=db, id=road_id)\n    if not road:\n        logger.warning(f\"Road with ID {road_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"Road not found\")",
        "detail": "safedrive.api.v1.endpoints.road",
        "documentation": {}
    },
    {
        "label": "update_road",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.road",
        "description": "safedrive.api.v1.endpoints.road",
        "peekOfCode": "def update_road(road_id: UUID, *, db: Session = Depends(get_db), road_in: RoadUpdate) -> RoadResponse:\n    road = crud_road.get(db=db, id=road_id)\n    if not road:\n        logger.warning(f\"Road with ID {road_id} not found for update.\")\n        raise HTTPException(status_code=404, detail=\"Road not found\")\n    updated_road = crud_road.update(db=db, db_obj=road, obj_in=road_in)\n    logger.info(f\"Updated Road with ID: {road_id}\")\n    return RoadResponse.from_orm(updated_road)\n@router.delete(\"/roads/{road_id}\", response_model=RoadResponse)\ndef delete_road(road_id: UUID, db: Session = Depends(get_db)) -> RoadResponse:",
        "detail": "safedrive.api.v1.endpoints.road",
        "documentation": {}
    },
    {
        "label": "delete_road",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.road",
        "description": "safedrive.api.v1.endpoints.road",
        "peekOfCode": "def delete_road(road_id: UUID, db: Session = Depends(get_db)) -> RoadResponse:\n    road = crud_road.get(db=db, id=road_id)\n    if not road:\n        logger.warning(f\"Road with ID {road_id} not found for deletion.\")\n        raise HTTPException(status_code=404, detail=\"Road not found\")\n    deleted_road = crud_road.delete(db=db, id=road_id)\n    logger.info(f\"Deleted Road with ID: {road_id}\")\n    return RoadResponse.from_orm(deleted_road)\n@router.post(\"/roads/batch_create\", response_model=List[RoadResponse])\ndef batch_create_roads(",
        "detail": "safedrive.api.v1.endpoints.road",
        "documentation": {}
    },
    {
        "label": "batch_create_roads",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.road",
        "description": "safedrive.api.v1.endpoints.road",
        "peekOfCode": "def batch_create_roads(\n        *,\n        db: Session = Depends(get_db),\n        roads_in: List[RoadCreate]\n    ) -> List[RoadResponse]:\n    try:\n        new_roads = road_crud.batch_create(db=db, objs_in=roads_in)\n        if not new_roads:\n            raise HTTPException(\n                status_code=400,",
        "detail": "safedrive.api.v1.endpoints.road",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.road",
        "description": "safedrive.api.v1.endpoints.road",
        "peekOfCode": "router = APIRouter()\nlogger = logging.getLogger(__name__)\n@router.post(\"/roads/\", response_model=RoadResponse)\ndef create_road(*, db: Session = Depends(get_db), road_in: RoadCreate) -> RoadResponse:\n    try:\n        new_road = crud_road.create(db=db, obj_in=road_in)\n        logger.info(f\"Created Road with ID: {new_road.id}\")\n        return RoadResponse.from_orm(new_road)\n    except Exception as e:\n        logger.error(f\"Error creating Road: {str(e)}\")",
        "detail": "safedrive.api.v1.endpoints.road",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.road",
        "description": "safedrive.api.v1.endpoints.road",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@router.post(\"/roads/\", response_model=RoadResponse)\ndef create_road(*, db: Session = Depends(get_db), road_in: RoadCreate) -> RoadResponse:\n    try:\n        new_road = crud_road.create(db=db, obj_in=road_in)\n        logger.info(f\"Created Road with ID: {new_road.id}\")\n        return RoadResponse.from_orm(new_road)\n    except Exception as e:\n        logger.error(f\"Error creating Road: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Error creating road\")",
        "detail": "safedrive.api.v1.endpoints.road",
        "documentation": {}
    },
    {
        "label": "create_trip",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "def create_trip(*, db: Session = Depends(get_db), trip_in: TripCreate) -> TripResponse:\n    try:\n        # Check for required fields\n        if not trip_in.driverProfileId or not trip_in.start_time:\n            logger.warning(\"Driver Profile ID and start time are required to create a trip.\")\n            raise HTTPException(status_code=400, detail=\"Driver Profile ID and start time are required to create a trip.\")\n        # Validate if the driver profile exists\n        profile_exists = driver_profile_crud.get(db=db, id=trip_in.driverProfileId)\n        if not profile_exists:\n            logger.warning(f\"DriverProfile with ID {trip_in.driverProfileId} not found.\")",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "get_trip",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "def get_trip(\n    trip_id: UUID,\n    db: Session = Depends(get_db),\n) -> TripResponse:\n    \"\"\"\n    Retrieve a trip by ID.\n    - **trip_id**: The UUID of the trip to retrieve.\n    \"\"\"\n    try:\n        trip = trip_crud.get(db=db, id=trip_id)",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "get_all_trips",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "def get_all_trips(\n    skip: int = 0,\n    limit: int = 5000,\n    db: Session = Depends(get_db),\n) -> List[TripResponse]:\n    \"\"\"\n    Retrieve all trips with optional pagination.\n    - **skip**: Number of records to skip.\n    - **limit**: Maximum number of records to retrieve (max 100).\n    \"\"\"",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "update_trip",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "def update_trip(\n    trip_id: UUID,\n    *,\n    db: Session = Depends(get_db),\n    trip_in: TripUpdate,\n) -> TripResponse:\n    \"\"\"\n    Update an existing trip.\n    - **trip_id**: The UUID of the trip to update.\n    - **trip_in**: The updated data.",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "delete_trip",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "def delete_trip(\n    trip_id: UUID,\n    db: Session = Depends(get_db),\n) -> TripResponse:\n    \"\"\"\n    Delete a trip by ID.\n    - **trip_id**: The UUID of the trip to delete.\n    \"\"\"\n    try:\n        trip = trip_crud.get(db=db, id=trip_id)",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "batch_delete_trips",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "def batch_delete_trips(ids: List[UUID], db: Session = Depends(get_db)):\n    try:\n        trip_crud.batch_delete(db=db, ids=ids)\n        return {\"message\": f\"{len(ids)} Trip records deleted.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch delete Trip: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch deletion failed.\")\n@router.post(\"/trips/batch_create\", response_model=List[TripResponse])\ndef batch_create_trips(\n        *,",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "batch_create_trips",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "def batch_create_trips(\n        *,\n        db: Session = Depends(get_db),\n        trips_in: List[TripCreate]\n    ) -> List[TripResponse]:\n    try:\n        new_trips = trip_crud.batch_create(db=db, objs_in=trips_in)\n        if not new_trips:\n            raise HTTPException(\n                status_code=400,",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nrouter = APIRouter()\n@router.post(\"/trips/\", response_model=TripResponse)\ndef create_trip(*, db: Session = Depends(get_db), trip_in: TripCreate) -> TripResponse:\n    try:\n        # Check for required fields\n        if not trip_in.driverProfileId or not trip_in.start_time:\n            logger.warning(\"Driver Profile ID and start time are required to create a trip.\")\n            raise HTTPException(status_code=400, detail=\"Driver Profile ID and start time are required to create a trip.\")",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.trip",
        "description": "safedrive.api.v1.endpoints.trip",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/trips/\", response_model=TripResponse)\ndef create_trip(*, db: Session = Depends(get_db), trip_in: TripCreate) -> TripResponse:\n    try:\n        # Check for required fields\n        if not trip_in.driverProfileId or not trip_in.start_time:\n            logger.warning(\"Driver Profile ID and start time are required to create a trip.\")\n            raise HTTPException(status_code=400, detail=\"Driver Profile ID and start time are required to create a trip.\")\n        # Validate if the driver profile exists\n        profile_exists = driver_profile_crud.get(db=db, id=trip_in.driverProfileId)",
        "detail": "safedrive.api.v1.endpoints.trip",
        "documentation": {}
    },
    {
        "label": "create_unsafe_behaviour",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "def create_unsafe_behaviour(\n    *,\n    db: Session = Depends(get_db),\n    unsafe_behaviour_in: UnsafeBehaviourCreate,\n) -> UnsafeBehaviourResponse:\n    \"\"\"\n    Create a new unsafe behaviour.\n    - **trip_id**: UUID of the associated trip.\n    - **behaviour_type**: Type of unsafe behaviour.\n    - **severity**: Severity level of the unsafe behaviour.",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "get_unsafe_behaviour",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "def get_unsafe_behaviour(\n    unsafe_behaviour_id: UUID,\n    db: Session = Depends(get_db),\n) -> UnsafeBehaviourResponse:\n    \"\"\"\n    Retrieve an unsafe behaviour by ID.\n    - **unsafe_behaviour_id**: The UUID of the unsafe behaviour to retrieve.\n    \"\"\"\n    try:\n        unsafe_behaviour = unsafe_behaviour_crud.get(db=db, id=unsafe_behaviour_id)",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "get_all_unsafe_behaviours",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "def get_all_unsafe_behaviours(\n    skip: int = 0,\n    limit: int = 20,\n    db: Session = Depends(get_db),\n) -> List[UnsafeBehaviourResponse]:\n    \"\"\"\n    Retrieve all unsafe behaviours with optional pagination.\n    - **skip**: Number of records to skip.\n    - **limit**: Maximum number of records to retrieve (max 100).\n    \"\"\"",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "update_unsafe_behaviour",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "def update_unsafe_behaviour(\n    unsafe_behaviour_id: UUID,\n    *,\n    db: Session = Depends(get_db),\n    unsafe_behaviour_in: UnsafeBehaviourUpdate,\n) -> UnsafeBehaviourResponse:\n    \"\"\"\n    Update an existing unsafe behaviour.\n    - **unsafe_behaviour_id**: The UUID of the unsafe behaviour to update.\n    - **unsafe_behaviour_in**: The updated data.",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "delete_unsafe_behaviour",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "def delete_unsafe_behaviour(\n    unsafe_behaviour_id: UUID,\n    db: Session = Depends(get_db),\n) -> UnsafeBehaviourResponse:\n    \"\"\"\n    Delete an unsafe behaviour by ID.\n    - **unsafe_behaviour_id**: The UUID of the unsafe behaviour to delete.\n    \"\"\"\n    try:\n        unsafe_behaviour = unsafe_behaviour_crud.get(db=db, id=unsafe_behaviour_id)",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "batch_create_unsafe_behaviours",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "def batch_create_unsafe_behaviours(data: List[UnsafeBehaviourCreate], db: Session = Depends(get_db)):\n    try:\n        created_behaviours = unsafe_behaviour_crud.batch_create(db=db, data_in=data)\n        return {\"message\": f\"{len(created_behaviours)} UnsafeBehaviour records created.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch create UnsafeBehaviour: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch creation failed.\")\n@router.delete(\"/unsafe_behaviours/batch_delete\", status_code=204)\ndef batch_delete_unsafe_behaviours(ids: List[UUID], db: Session = Depends(get_db)):\n    try:",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "batch_delete_unsafe_behaviours",
        "kind": 2,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "def batch_delete_unsafe_behaviours(ids: List[UUID], db: Session = Depends(get_db)):\n    try:\n        unsafe_behaviour_crud.batch_delete(db=db, ids=ids)\n        return {\"message\": f\"{len(ids)} UnsafeBehaviour records deleted.\"}\n    except Exception as e:\n        logger.error(f\"Error in batch delete UnsafeBehaviour: {str(e)}\")\n        raise HTTPException(status_code=500, detail=\"Batch deletion failed.\")",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nrouter = APIRouter()\n@router.post(\"/unsafe_behaviours/\", response_model=UnsafeBehaviourResponse)\ndef create_unsafe_behaviour(\n    *,\n    db: Session = Depends(get_db),\n    unsafe_behaviour_in: UnsafeBehaviourCreate,\n) -> UnsafeBehaviourResponse:\n    \"\"\"",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "description": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/unsafe_behaviours/\", response_model=UnsafeBehaviourResponse)\ndef create_unsafe_behaviour(\n    *,\n    db: Session = Depends(get_db),\n    unsafe_behaviour_in: UnsafeBehaviourCreate,\n) -> UnsafeBehaviourResponse:\n    \"\"\"\n    Create a new unsafe behaviour.\n    - **trip_id**: UUID of the associated trip.",
        "detail": "safedrive.api.v1.endpoints.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "safe_drive_africa_api_router",
        "kind": 5,
        "importPath": "safedrive.api.v1.api_router",
        "description": "safedrive.api.v1.api_router",
        "peekOfCode": "safe_drive_africa_api_router = APIRouter()\nsafe_drive_africa_api_router.include_router(index_router, prefix=\"/api\", tags=[\"Index\"])\nsafe_drive_africa_api_router.include_router(trips_router, prefix=\"/api\", tags=[\"Trips\"])\n# safe_drive_africa_api_router.include_router(alcohol_questionnaire_router, prefix=\"/api\", tags=[\"Alcohol Questionnaire\"])\nsafe_drive_africa_api_router.include_router(\n    alcohol_questionnaire_router, prefix=\"/api/alcohol-questionnaire\", tags=[\"Alcohol Questionnaire\"]\n)\nlogger.info(\"Including alcohol_questionnaire_router in API router\")\nsafe_drive_africa_api_router.include_router(\n    alcohol_questionnaire_router, prefix=\"/api/alcohol_questionnaire\", tags=[\"Alcohol Questionnaire\"]",
        "detail": "safedrive.api.v1.api_router",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "safedrive.core.config",
        "description": "safedrive.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    database_url: str\n    class Config:\n        env_file = \".env\"\nsettings = Settings()\nif not settings.database_url:\n    raise ValueError(\"No DATABASE_URL found in environment variables\")\nprint(f\"Database URL: {settings.database_url}\")",
        "detail": "safedrive.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "safedrive.core.config",
        "description": "safedrive.core.config",
        "peekOfCode": "settings = Settings()\nif not settings.database_url:\n    raise ValueError(\"No DATABASE_URL found in environment variables\")\nprint(f\"Database URL: {settings.database_url}\")",
        "detail": "safedrive.core.config",
        "documentation": {}
    },
    {
        "label": "CRUDModelInputs",
        "kind": 6,
        "importPath": "safedrive.crud.ai_model_inputs",
        "description": "safedrive.crud.ai_model_inputs",
        "peekOfCode": "class CRUDModelInputs:\n    \"\"\"\n    CRUD operations for AIModelInput model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"\n        self.model = model",
        "detail": "safedrive.crud.ai_model_inputs",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.ai_model_inputs",
        "description": "safedrive.crud.ai_model_inputs",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDModelInputs:\n    \"\"\"\n    CRUD operations for AIModelInput model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"",
        "detail": "safedrive.crud.ai_model_inputs",
        "documentation": {}
    },
    {
        "label": "ai_model_inputs_crud",
        "kind": 5,
        "importPath": "safedrive.crud.ai_model_inputs",
        "description": "safedrive.crud.ai_model_inputs",
        "peekOfCode": "ai_model_inputs_crud = CRUDModelInputs(AIModelInput)",
        "detail": "safedrive.crud.ai_model_inputs",
        "documentation": {}
    },
    {
        "label": "AlcoholQuestionnaireCRUD",
        "kind": 6,
        "importPath": "safedrive.crud.alcohol_questionnaire",
        "description": "safedrive.crud.alcohol_questionnaire",
        "peekOfCode": "class AlcoholQuestionnaireCRUD:\n    def __init__(self, db: Session):\n        self.db = db\n    def create(self, questionnaire_data: AlcoholQuestionnaireCreateSchema) -> AlcoholQuestionnaire:\n        try:\n            db_questionnaire = AlcoholQuestionnaire(\n                id=questionnaire_data.id,\n                driverProfileId=questionnaire_data.driverProfileId,\n                drankAlcohol=questionnaire_data.drankAlcohol,\n                selectedAlcoholTypes=questionnaire_data.selectedAlcoholTypes,",
        "detail": "safedrive.crud.alcohol_questionnaire",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "safedrive.crud.alcohol_questionnaire",
        "description": "safedrive.crud.alcohol_questionnaire",
        "peekOfCode": "router = APIRouter()\nclass AlcoholQuestionnaireCRUD:\n    def __init__(self, db: Session):\n        self.db = db\n    def create(self, questionnaire_data: AlcoholQuestionnaireCreateSchema) -> AlcoholQuestionnaire:\n        try:\n            db_questionnaire = AlcoholQuestionnaire(\n                id=questionnaire_data.id,\n                driverProfileId=questionnaire_data.driverProfileId,\n                drankAlcohol=questionnaire_data.drankAlcohol,",
        "detail": "safedrive.crud.alcohol_questionnaire",
        "documentation": {}
    },
    {
        "label": "CRUDCause",
        "kind": 6,
        "importPath": "safedrive.crud.cause",
        "description": "safedrive.crud.cause",
        "peekOfCode": "class CRUDCause:\n    \"\"\"\n    CRUD operations for Cause.\n    Methods:\n    - **create**: Adds a new Cause record.\n    - **get**: Retrieves a Cause by UUID.\n    - **get_all**: Retrieves all Causes.\n    - **update**: Updates a Cause record.\n    - **delete**: Deletes a Cause record.\n    \"\"\"",
        "detail": "safedrive.crud.cause",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.cause",
        "description": "safedrive.crud.cause",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDCause:\n    \"\"\"\n    CRUD operations for Cause.\n    Methods:\n    - **create**: Adds a new Cause record.\n    - **get**: Retrieves a Cause by UUID.\n    - **get_all**: Retrieves all Causes.\n    - **update**: Updates a Cause record.\n    - **delete**: Deletes a Cause record.",
        "detail": "safedrive.crud.cause",
        "documentation": {}
    },
    {
        "label": "cause_crud",
        "kind": 5,
        "importPath": "safedrive.crud.cause",
        "description": "safedrive.crud.cause",
        "peekOfCode": "cause_crud = CRUDCause(Cause)",
        "detail": "safedrive.crud.cause",
        "documentation": {}
    },
    {
        "label": "CRUDDriverProfile",
        "kind": 6,
        "importPath": "safedrive.crud.driver_profile",
        "description": "safedrive.crud.driver_profile",
        "peekOfCode": "class CRUDDriverProfile:\n    def __init__(self, model):\n        self.model = model\n    def create(self, db: Session, obj_in: DriverProfileCreate) -> DriverProfile:\n        try:\n            obj_data = obj_in.model_dump()\n            # Ensure driverProfileId is a proper UUID, regardless of input type.\n            if 'driverProfileId' in obj_data:\n                if isinstance(obj_data['driverProfileId'], str):\n                    obj_data['driverProfileId'] = UUID(obj_data['driverProfileId'])",
        "detail": "safedrive.crud.driver_profile",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.driver_profile",
        "description": "safedrive.crud.driver_profile",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nhandler = logging.StreamHandler()\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\nclass CRUDDriverProfile:\n    def __init__(self, model):\n        self.model = model\n    def create(self, db: Session, obj_in: DriverProfileCreate) -> DriverProfile:",
        "detail": "safedrive.crud.driver_profile",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 5,
        "importPath": "safedrive.crud.driver_profile",
        "description": "safedrive.crud.driver_profile",
        "peekOfCode": "handler = logging.StreamHandler()\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\nclass CRUDDriverProfile:\n    def __init__(self, model):\n        self.model = model\n    def create(self, db: Session, obj_in: DriverProfileCreate) -> DriverProfile:\n        try:\n            obj_data = obj_in.model_dump()",
        "detail": "safedrive.crud.driver_profile",
        "documentation": {}
    },
    {
        "label": "formatter",
        "kind": 5,
        "importPath": "safedrive.crud.driver_profile",
        "description": "safedrive.crud.driver_profile",
        "peekOfCode": "formatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\nclass CRUDDriverProfile:\n    def __init__(self, model):\n        self.model = model\n    def create(self, db: Session, obj_in: DriverProfileCreate) -> DriverProfile:\n        try:\n            obj_data = obj_in.model_dump()\n            # Ensure driverProfileId is a proper UUID, regardless of input type.",
        "detail": "safedrive.crud.driver_profile",
        "documentation": {}
    },
    {
        "label": "driver_profile_crud",
        "kind": 5,
        "importPath": "safedrive.crud.driver_profile",
        "description": "safedrive.crud.driver_profile",
        "peekOfCode": "driver_profile_crud = CRUDDriverProfile(DriverProfile)",
        "detail": "safedrive.crud.driver_profile",
        "documentation": {}
    },
    {
        "label": "CRUDDrivingTip",
        "kind": 6,
        "importPath": "safedrive.crud.driving_tip",
        "description": "safedrive.crud.driving_tip",
        "peekOfCode": "class CRUDDrivingTip:\n    \"\"\"\n    CRUD operations for DrivingTip.\n    Methods:\n    - **create**: Adds a new DrivingTip record.\n    - **get**: Retrieves a DrivingTip by UUID.\n    - **get_all**: Retrieves all DrivingTips.\n    - **update**: Updates a DrivingTip record.\n    - **delete**: Deletes a DrivingTip record.\n    \"\"\"",
        "detail": "safedrive.crud.driving_tip",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.driving_tip",
        "description": "safedrive.crud.driving_tip",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDDrivingTip:\n    \"\"\"\n    CRUD operations for DrivingTip.\n    Methods:\n    - **create**: Adds a new DrivingTip record.\n    - **get**: Retrieves a DrivingTip by UUID.\n    - **get_all**: Retrieves all DrivingTips.\n    - **update**: Updates a DrivingTip record.\n    - **delete**: Deletes a DrivingTip record.",
        "detail": "safedrive.crud.driving_tip",
        "documentation": {}
    },
    {
        "label": "driving_tip_crud",
        "kind": 5,
        "importPath": "safedrive.crud.driving_tip",
        "description": "safedrive.crud.driving_tip",
        "peekOfCode": "driving_tip_crud = CRUDDrivingTip(DrivingTip)",
        "detail": "safedrive.crud.driving_tip",
        "documentation": {}
    },
    {
        "label": "CRUDEmbedding",
        "kind": 6,
        "importPath": "safedrive.crud.embedding",
        "description": "safedrive.crud.embedding",
        "peekOfCode": "class CRUDEmbedding:\n    def __init__(self, model):\n        self.model = model\n    def create(self, db: Session, obj_in: EmbeddingCreate) -> Embedding:\n        db_obj = self.model(**obj_in.dict(), chunk_id=generate_uuid_binary())\n        db.add(db_obj)\n        try:\n            db.commit()\n            logger.info(f\"Created Embedding with ID: {db_obj.chunk_id.hex()}\")\n        except Exception as e:",
        "detail": "safedrive.crud.embedding",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.embedding",
        "description": "safedrive.crud.embedding",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDEmbedding:\n    def __init__(self, model):\n        self.model = model\n    def create(self, db: Session, obj_in: EmbeddingCreate) -> Embedding:\n        db_obj = self.model(**obj_in.dict(), chunk_id=generate_uuid_binary())\n        db.add(db_obj)\n        try:\n            db.commit()\n            logger.info(f\"Created Embedding with ID: {db_obj.chunk_id.hex()}\")",
        "detail": "safedrive.crud.embedding",
        "documentation": {}
    },
    {
        "label": "embedding_crud",
        "kind": 5,
        "importPath": "safedrive.crud.embedding",
        "description": "safedrive.crud.embedding",
        "peekOfCode": "embedding_crud = CRUDEmbedding(Embedding)",
        "detail": "safedrive.crud.embedding",
        "documentation": {}
    },
    {
        "label": "CRUDLocation",
        "kind": 6,
        "importPath": "safedrive.crud.location",
        "description": "safedrive.crud.location",
        "peekOfCode": "class CRUDLocation:\n    \"\"\"\n    CRUD operations for the Location model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"\n        self.model = model",
        "detail": "safedrive.crud.location",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.location",
        "description": "safedrive.crud.location",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDLocation:\n    \"\"\"\n    CRUD operations for the Location model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"",
        "detail": "safedrive.crud.location",
        "documentation": {}
    },
    {
        "label": "location_crud",
        "kind": 5,
        "importPath": "safedrive.crud.location",
        "description": "safedrive.crud.location",
        "peekOfCode": "location_crud = CRUDLocation(Location)",
        "detail": "safedrive.crud.location",
        "documentation": {}
    },
    {
        "label": "CRUDNLGReport",
        "kind": 6,
        "importPath": "safedrive.crud.nlg_report",
        "description": "safedrive.crud.nlg_report",
        "peekOfCode": "class CRUDNLGReport:\n    \"\"\"\n    CRUD operations for NLGReport.\n    \"\"\"\n    def __init__(self, model):\n        self.model = model\n    def create(self, db: Session, obj_in: NLGReportCreate) -> NLGReport:\n        \"\"\"\n        Create a new NLGReport record in the database.\n        :param db: The database session.",
        "detail": "safedrive.crud.nlg_report",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.nlg_report",
        "description": "safedrive.crud.nlg_report",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDNLGReport:\n    \"\"\"\n    CRUD operations for NLGReport.\n    \"\"\"\n    def __init__(self, model):\n        self.model = model\n    def create(self, db: Session, obj_in: NLGReportCreate) -> NLGReport:\n        \"\"\"\n        Create a new NLGReport record in the database.",
        "detail": "safedrive.crud.nlg_report",
        "documentation": {}
    },
    {
        "label": "nlg_report_crud",
        "kind": 5,
        "importPath": "safedrive.crud.nlg_report",
        "description": "safedrive.crud.nlg_report",
        "peekOfCode": "nlg_report_crud = CRUDNLGReport(NLGReport)",
        "detail": "safedrive.crud.nlg_report",
        "documentation": {}
    },
    {
        "label": "CRUDRawSensorData",
        "kind": 6,
        "importPath": "safedrive.crud.raw_sensor_data",
        "description": "safedrive.crud.raw_sensor_data",
        "peekOfCode": "class CRUDRawSensorData:\n    \"\"\"\n    CRUD operations for the RawSensorData model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"\n        self.model = model",
        "detail": "safedrive.crud.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.raw_sensor_data",
        "description": "safedrive.crud.raw_sensor_data",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDRawSensorData:\n    \"\"\"\n    CRUD operations for the RawSensorData model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"",
        "detail": "safedrive.crud.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "raw_sensor_data_crud",
        "kind": 5,
        "importPath": "safedrive.crud.raw_sensor_data",
        "description": "safedrive.crud.raw_sensor_data",
        "peekOfCode": "raw_sensor_data_crud = CRUDRawSensorData(RawSensorData)",
        "detail": "safedrive.crud.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "CRUDRoad",
        "kind": 6,
        "importPath": "safedrive.crud.road",
        "description": "safedrive.crud.road",
        "peekOfCode": "class CRUDRoad:\n    def __init__(self, model):\n        self.model = model\n    def create(self, db: Session, obj_in: RoadCreate) -> Road:\n        try:\n            obj_data = obj_in.dict()\n            # Convert UUID strings to UUID objects if necessary\n            for uuid_field in ['id', 'driverProfileId']:\n                if uuid_field in obj_data and isinstance(obj_data[uuid_field], str):\n                    obj_data[uuid_field] = UUID(obj_data[uuid_field])",
        "detail": "safedrive.crud.road",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.road",
        "description": "safedrive.crud.road",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDRoad:\n    def __init__(self, model):\n        self.model = model\n    def create(self, db: Session, obj_in: RoadCreate) -> Road:\n        try:\n            obj_data = obj_in.dict()\n            # Convert UUID strings to UUID objects if necessary\n            for uuid_field in ['id', 'driverProfileId']:\n                if uuid_field in obj_data and isinstance(obj_data[uuid_field], str):",
        "detail": "safedrive.crud.road",
        "documentation": {}
    },
    {
        "label": "crud_road",
        "kind": 5,
        "importPath": "safedrive.crud.road",
        "description": "safedrive.crud.road",
        "peekOfCode": "crud_road = CRUDRoad(Road)",
        "detail": "safedrive.crud.road",
        "documentation": {}
    },
    {
        "label": "CRUDTrip",
        "kind": 6,
        "importPath": "safedrive.crud.trip",
        "description": "safedrive.crud.trip",
        "peekOfCode": "class CRUDTrip:\n    \"\"\"\n    CRUD operations for the Trip model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"\n        self.model = model",
        "detail": "safedrive.crud.trip",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.trip",
        "description": "safedrive.crud.trip",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDTrip:\n    \"\"\"\n    CRUD operations for the Trip model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"",
        "detail": "safedrive.crud.trip",
        "documentation": {}
    },
    {
        "label": "trip_crud",
        "kind": 5,
        "importPath": "safedrive.crud.trip",
        "description": "safedrive.crud.trip",
        "peekOfCode": "trip_crud = CRUDTrip(Trip)",
        "detail": "safedrive.crud.trip",
        "documentation": {}
    },
    {
        "label": "CRUDUnsafeBehaviour",
        "kind": 6,
        "importPath": "safedrive.crud.unsafe_behaviour",
        "description": "safedrive.crud.unsafe_behaviour",
        "peekOfCode": "class CRUDUnsafeBehaviour:\n    \"\"\"\n    CRUD operations for the UnsafeBehaviour model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"\n        self.model = model",
        "detail": "safedrive.crud.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.crud.unsafe_behaviour",
        "description": "safedrive.crud.unsafe_behaviour",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass CRUDUnsafeBehaviour:\n    \"\"\"\n    CRUD operations for the UnsafeBehaviour model.\n    \"\"\"\n    def __init__(self, model):\n        \"\"\"\n        Initialize the CRUD object with a database model.\n        :param model: The SQLAlchemy model class.\n        \"\"\"",
        "detail": "safedrive.crud.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "unsafe_behaviour_crud",
        "kind": 5,
        "importPath": "safedrive.crud.unsafe_behaviour",
        "description": "safedrive.crud.unsafe_behaviour",
        "peekOfCode": "unsafe_behaviour_crud = CRUDUnsafeBehaviour(UnsafeBehaviour)",
        "detail": "safedrive.crud.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "peekOfCode": "DATABASE_URL = os.getenv(\"DATABASE_URL\")\nif not DATABASE_URL:\n    raise RuntimeError(\"DATABASE_URL is not set\")\n# SQLAlchemy engine and session\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Declarative base for ORM models\nBase = declarative_base()",
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "peekOfCode": "engine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Declarative base for ORM models\nBase = declarative_base()",
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n# Declarative base for ORM models\nBase = declarative_base()",
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "safedrive.database.base",
        "description": "safedrive.database.base",
        "peekOfCode": "Base = declarative_base()",
        "detail": "safedrive.database.base",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "safedrive.database.db",
        "description": "safedrive.database.db",
        "peekOfCode": "def get_db():\n    \"\"\"\n    Dependency to get a SQLAlchemy session.\n    This will ensure that the session is properly closed after use.\n    Yields:\n        db (SessionLocal): SQLAlchemy session object.\n    \"\"\"\n    db = SessionLocal()\n    try:\n        yield db",
        "detail": "safedrive.database.db",
        "documentation": {}
    },
    {
        "label": "AIModelInput",
        "kind": 6,
        "importPath": "safedrive.models.ai_model_input",
        "description": "safedrive.models.ai_model_input",
        "peekOfCode": "class AIModelInput(Base):\n    \"\"\"\n    SQLAlchemy model for AI Model Input.\n    Attributes:\n    - **id**: Primary key, stored as BINARY(16).\n    - **trip_id**: Foreign key referencing Trip.id, stored as BINARY(16).\n    - **timestamp**: Timestamp of the AI model input.\n    - **date**: Date of the AI model input.\n    - **hour_of_day_mean**: Mean hour of the day.\n    - **day_of_week_mean**: Mean day of the week.",
        "detail": "safedrive.models.ai_model_input",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.ai_model_input",
        "description": "safedrive.models.ai_model_input",
        "peekOfCode": "def generate_uuid_binary():\n    return uuid4().bytes\nclass AIModelInput(Base):\n    \"\"\"\n    SQLAlchemy model for AI Model Input.\n    Attributes:\n    - **id**: Primary key, stored as BINARY(16).\n    - **trip_id**: Foreign key referencing Trip.id, stored as BINARY(16).\n    - **timestamp**: Timestamp of the AI model input.\n    - **date**: Date of the AI model input.",
        "detail": "safedrive.models.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AlcoholQuestionnaire",
        "kind": 6,
        "importPath": "safedrive.models.alcohol_questionnaire",
        "description": "safedrive.models.alcohol_questionnaire",
        "peekOfCode": "class AlcoholQuestionnaire(Base):\n    __tablename__ = \"alcohol_questionnaire\"\n    id = Column(UUIDType(binary=True), primary_key=True, default=uuid4)\n    driverProfileId = Column(UUIDType(binary=True), ForeignKey(\"driver_profile.driverProfileId\"), nullable=False)\n    drankAlcohol = Column(Boolean, nullable=False)\n    selectedAlcoholTypes = Column(Text, nullable=False)\n    beerQuantity = Column(String(255), nullable=False)\n    wineQuantity = Column(String(255), nullable=False)\n    spiritsQuantity = Column(String(255), nullable=False)\n    firstDrinkTime = Column(String(255), nullable=False)",
        "detail": "safedrive.models.alcohol_questionnaire",
        "documentation": {}
    },
    {
        "label": "Cause",
        "kind": 6,
        "importPath": "safedrive.models.cause",
        "description": "safedrive.models.cause",
        "peekOfCode": "class Cause(Base):\n    \"\"\"\n    Cause model representing possible causes linked to unsafe behaviors.\n    Attributes:\n    - **id**: Unique identifier for each cause.\n    - **unsafe_behaviour_id**: Foreign key linking to the unsafe behavior associated with this cause.\n    - **name**: Description or name of the cause.\n    - **influence**: Boolean indicating if the cause has significant influence.\n    - **created_at**: Timestamp when the cause was recorded.\n    - **updated_at**: Timestamp when the cause was last updated.",
        "detail": "safedrive.models.cause",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.cause",
        "description": "safedrive.models.cause",
        "peekOfCode": "def generate_uuid_binary():\n    \"\"\"Generate a binary UUID.\"\"\"\n    return uuid4().bytes\nclass Cause(Base):\n    \"\"\"\n    Cause model representing possible causes linked to unsafe behaviors.\n    Attributes:\n    - **id**: Unique identifier for each cause.\n    - **unsafe_behaviour_id**: Foreign key linking to the unsafe behavior associated with this cause.\n    - **name**: Description or name of the cause.",
        "detail": "safedrive.models.cause",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.models.cause",
        "description": "safedrive.models.cause",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef generate_uuid_binary():\n    \"\"\"Generate a binary UUID.\"\"\"\n    return uuid4().bytes\nclass Cause(Base):\n    \"\"\"\n    Cause model representing possible causes linked to unsafe behaviors.\n    Attributes:\n    - **id**: Unique identifier for each cause.\n    - **unsafe_behaviour_id**: Foreign key linking to the unsafe behavior associated with this cause.",
        "detail": "safedrive.models.cause",
        "documentation": {}
    },
    {
        "label": "DriverProfile",
        "kind": 6,
        "importPath": "safedrive.models.driver_profile",
        "description": "safedrive.models.driver_profile",
        "peekOfCode": "class DriverProfile(Base):\n    __tablename__ = \"driver_profile\"\n    driverProfileId = Column(UUIDType(binary=True), primary_key=True, default=uuid4)\n    email = Column(String(50), unique=True, nullable=False)\n    sync = Column(Boolean, nullable=False)\n    # Relationships\n    alcohol_questionnaires = relationship(\"AlcoholQuestionnaire\", back_populates=\"driver_profile\")\n    driving_tips = relationship(\"DrivingTip\", back_populates=\"profile\", cascade=\"all, delete-orphan\")\n    trips = relationship(\"Trip\", back_populates=\"driver_profile\", cascade=\"all, delete-orphan\")\n    unsafe_behaviours= relationship(\"UnsafeBehaviour\", back_populates=\"driver_profile\", cascade=\"all, delete-orphan\")",
        "detail": "safedrive.models.driver_profile",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.driver_profile",
        "description": "safedrive.models.driver_profile",
        "peekOfCode": "def generate_uuid_binary():\n    \"\"\"Generate a binary UUID.\"\"\"\n    return uuid4().bytes\nclass DriverProfile(Base):\n    __tablename__ = \"driver_profile\"\n    driverProfileId = Column(UUIDType(binary=True), primary_key=True, default=uuid4)\n    email = Column(String(50), unique=True, nullable=False)\n    sync = Column(Boolean, nullable=False)\n    # Relationships\n    alcohol_questionnaires = relationship(\"AlcoholQuestionnaire\", back_populates=\"driver_profile\")",
        "detail": "safedrive.models.driver_profile",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.models.driver_profile",
        "description": "safedrive.models.driver_profile",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef generate_uuid_binary():\n    \"\"\"Generate a binary UUID.\"\"\"\n    return uuid4().bytes\nclass DriverProfile(Base):\n    __tablename__ = \"driver_profile\"\n    driverProfileId = Column(UUIDType(binary=True), primary_key=True, default=uuid4)\n    email = Column(String(50), unique=True, nullable=False)\n    sync = Column(Boolean, nullable=False)\n    # Relationships",
        "detail": "safedrive.models.driver_profile",
        "documentation": {}
    },
    {
        "label": "DrivingTip",
        "kind": 6,
        "importPath": "safedrive.models.driving_tip",
        "description": "safedrive.models.driving_tip",
        "peekOfCode": "class DrivingTip(Base):\n    \"\"\"\n    DrivingTip model representing driving advice and regulations.\n    Attributes:\n    - **tip_id**: Unique identifier for each driving tip.\n    - **title**: Title or summary of the tip.\n    - **meaning**: Explanation of the driving tip's meaning.\n    - **penalty**: Any penalties associated with not following the tip.\n    - **fine**: The amount of fine, if applicable.\n    - **law**: Relevant law associated with the tip.",
        "detail": "safedrive.models.driving_tip",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.driving_tip",
        "description": "safedrive.models.driving_tip",
        "peekOfCode": "def generate_uuid_binary():\n    \"\"\"Generate a binary UUID.\"\"\"\n    return uuid4()\nclass DrivingTip(Base):\n    \"\"\"\n    DrivingTip model representing driving advice and regulations.\n    Attributes:\n    - **tip_id**: Unique identifier for each driving tip.\n    - **title**: Title or summary of the tip.\n    - **meaning**: Explanation of the driving tip's meaning.",
        "detail": "safedrive.models.driving_tip",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.models.driving_tip",
        "description": "safedrive.models.driving_tip",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef generate_uuid_binary():\n    \"\"\"Generate a binary UUID.\"\"\"\n    return uuid4()\nclass DrivingTip(Base):\n    \"\"\"\n    DrivingTip model representing driving advice and regulations.\n    Attributes:\n    - **tip_id**: Unique identifier for each driving tip.\n    - **title**: Title or summary of the tip.",
        "detail": "safedrive.models.driving_tip",
        "documentation": {}
    },
    {
        "label": "Embedding",
        "kind": 6,
        "importPath": "safedrive.models.embedding",
        "description": "safedrive.models.embedding",
        "peekOfCode": "class Embedding(Base):\n    \"\"\"\n    Embedding model representing the text embedding table in the database.\n    Attributes:\n    - **chunk_id**: Primary key UUID for each text embedding.\n    - **chunk_text**: The chunk of text.\n    - **embedding**: Base64 encoded embedding for the text.\n    - **source_type**: Source type of the chunked text (e.g., Research Article).\n    - **source_page**: Page number from where the text originates.\n    - **created_at**: Timestamp of creation.",
        "detail": "safedrive.models.embedding",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.embedding",
        "description": "safedrive.models.embedding",
        "peekOfCode": "def generate_uuid_binary():\n    return uuid4().bytes\nclass Embedding(Base):\n    \"\"\"\n    Embedding model representing the text embedding table in the database.\n    Attributes:\n    - **chunk_id**: Primary key UUID for each text embedding.\n    - **chunk_text**: The chunk of text.\n    - **embedding**: Base64 encoded embedding for the text.\n    - **source_type**: Source type of the chunked text (e.g., Research Article).",
        "detail": "safedrive.models.embedding",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.models.embedding",
        "description": "safedrive.models.embedding",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef generate_uuid_binary():\n    return uuid4().bytes\nclass Embedding(Base):\n    \"\"\"\n    Embedding model representing the text embedding table in the database.\n    Attributes:\n    - **chunk_id**: Primary key UUID for each text embedding.\n    - **chunk_text**: The chunk of text.\n    - **embedding**: Base64 encoded embedding for the text.",
        "detail": "safedrive.models.embedding",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.generate_uuid_binary",
        "description": "safedrive.models.generate_uuid_binary",
        "peekOfCode": "def generate_uuid_binary():\n    \"\"\"Generate a binary UUID.\"\"\"\n    return uuid4().bytes",
        "detail": "safedrive.models.generate_uuid_binary",
        "documentation": {}
    },
    {
        "label": "Location",
        "kind": 6,
        "importPath": "safedrive.models.location",
        "description": "safedrive.models.location",
        "peekOfCode": "class Location(Base):\n    \"\"\"\n    Location model representing the geographical information captured during a trip.\n    Attributes:\n    - **id**: Unique identifier for each location.\n    - **latitude**: Latitude of the recorded location.\n    - **longitude**: Longitude of the recorded location.\n    - **timestamp**: The epoch timestamp when the location was recorded (milliseconds).\n    - **date**: The date the location was recorded.\n    - **altitude**: Altitude of the recorded location.",
        "detail": "safedrive.models.location",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.location",
        "description": "safedrive.models.location",
        "peekOfCode": "def generate_uuid_binary():\n    return uuid4().bytes\nclass Location(Base):\n    \"\"\"\n    Location model representing the geographical information captured during a trip.\n    Attributes:\n    - **id**: Unique identifier for each location.\n    - **latitude**: Latitude of the recorded location.\n    - **longitude**: Longitude of the recorded location.\n    - **timestamp**: The epoch timestamp when the location was recorded (milliseconds).",
        "detail": "safedrive.models.location",
        "documentation": {}
    },
    {
        "label": "NLGReport",
        "kind": 6,
        "importPath": "safedrive.models.nlg_report",
        "description": "safedrive.models.nlg_report",
        "peekOfCode": "class NLGReport(Base):\n    \"\"\"\n    NLGReport model represents a generated report with metadata and associations.\n    Attributes:\n    - **id**: Primary key, UUID in binary format.\n    - **user_id**: Foreign key, UUID in binary format, references the user who generated the report.\n    - **report_text**: Text content of the generated report.\n    - **generated_at**: Timestamp of report generation.\n    - **synced**: Boolean indicating if the report is synced with a remote server.\n    \"\"\"",
        "detail": "safedrive.models.nlg_report",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.nlg_report",
        "description": "safedrive.models.nlg_report",
        "peekOfCode": "def generate_uuid_binary():\n    return uuid4().bytes\nclass NLGReport(Base):\n    \"\"\"\n    NLGReport model represents a generated report with metadata and associations.\n    Attributes:\n    - **id**: Primary key, UUID in binary format.\n    - **user_id**: Foreign key, UUID in binary format, references the user who generated the report.\n    - **report_text**: Text content of the generated report.\n    - **generated_at**: Timestamp of report generation.",
        "detail": "safedrive.models.nlg_report",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "safedrive.models.nlg_report",
        "description": "safedrive.models.nlg_report",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef generate_uuid_binary():\n    return uuid4().bytes\nclass NLGReport(Base):\n    \"\"\"\n    NLGReport model represents a generated report with metadata and associations.\n    Attributes:\n    - **id**: Primary key, UUID in binary format.\n    - **user_id**: Foreign key, UUID in binary format, references the user who generated the report.\n    - **report_text**: Text content of the generated report.",
        "detail": "safedrive.models.nlg_report",
        "documentation": {}
    },
    {
        "label": "RawSensorData",
        "kind": 6,
        "importPath": "safedrive.models.raw_sensor_data",
        "description": "safedrive.models.raw_sensor_data",
        "peekOfCode": "class RawSensorData(Base):\n    \"\"\"\n    Represents raw sensor data collected from sensors.\n    Attributes:\n    - **id**: Unique identifier for the raw sensor data.\n    - **sensor_type**: Type of the sensor (e.g., accelerometer, gyroscope).\n    - **sensor_type_name**: Name of the sensor type.\n    - **values**: Sensor readings, stored as a JSON-encoded string.\n    - **timestamp**: Timestamp of the sensor reading.\n    - **date**: Date when the sensor reading was recorded.",
        "detail": "safedrive.models.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.raw_sensor_data",
        "description": "safedrive.models.raw_sensor_data",
        "peekOfCode": "def generate_uuid_binary():\n    return uuid4().bytes\nclass RawSensorData(Base):\n    \"\"\"\n    Represents raw sensor data collected from sensors.\n    Attributes:\n    - **id**: Unique identifier for the raw sensor data.\n    - **sensor_type**: Type of the sensor (e.g., accelerometer, gyroscope).\n    - **sensor_type_name**: Name of the sensor type.\n    - **values**: Sensor readings, stored as a JSON-encoded string.",
        "detail": "safedrive.models.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "Road",
        "kind": 6,
        "importPath": "safedrive.models.road",
        "description": "safedrive.models.road",
        "peekOfCode": "class Road(Base):\n    __tablename__ = \"roads\"\n    id = Column(UUIDType(binary=True), primary_key=True, default=uuid4)\n    driverProfileId = Column(UUIDType(binary=True), ForeignKey('driver_profile.driverProfileId'), nullable=False)\n    name = Column(String(255), nullable=False)\n    roadType = Column(String(100), nullable=False)\n    speedLimit = Column(Integer, nullable=False)\n    latitude = Column(Float, nullable=False)\n    longitude = Column(Float, nullable=False)\n    radius=Column(Float, nullable=False)",
        "detail": "safedrive.models.road",
        "documentation": {}
    },
    {
        "label": "Trip",
        "kind": 6,
        "importPath": "safedrive.models.trip",
        "description": "safedrive.models.trip",
        "peekOfCode": "class Trip(Base):\n    __tablename__ = \"trip\"\n    id = Column(UUIDType(binary=True), primary_key=True, default=uuid4)\n    driverProfileId = Column(UUIDType(binary=True), ForeignKey('driver_profile.driverProfileId', ondelete=\"CASCADE\"), nullable=False)\n    start_date = Column(DateTime)\n    end_date = Column(DateTime, nullable=True)\n    start_time = Column(BigInteger, nullable=True)  # Changed to BigInteger\n    end_time = Column(BigInteger, nullable=True) \n    sync = Column(Boolean, nullable=False)\n    # Relationships",
        "detail": "safedrive.models.trip",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.trip",
        "description": "safedrive.models.trip",
        "peekOfCode": "def generate_uuid_binary():\n    return uuid4().bytes\nclass Trip(Base):\n    __tablename__ = \"trip\"\n    id = Column(UUIDType(binary=True), primary_key=True, default=uuid4)\n    driverProfileId = Column(UUIDType(binary=True), ForeignKey('driver_profile.driverProfileId', ondelete=\"CASCADE\"), nullable=False)\n    start_date = Column(DateTime)\n    end_date = Column(DateTime, nullable=True)\n    start_time = Column(BigInteger, nullable=True)  # Changed to BigInteger\n    end_time = Column(BigInteger, nullable=True) ",
        "detail": "safedrive.models.trip",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviour",
        "kind": 6,
        "importPath": "safedrive.models.unsafe_behaviour",
        "description": "safedrive.models.unsafe_behaviour",
        "peekOfCode": "class UnsafeBehaviour(Base):\n    \"\"\"\n    Represents the unsafe_behaviour table in the database.\n    Attributes:\n    - **id**: Unique identifier for the unsafe behaviour.\n    - **trip_id**: Foreign key to Trip model representing the trip associated with the unsafe behaviour.\n    - **location_id**: Foreign key to Location model representing the location associated with the behaviour.\n    - **behaviour_type**: Type of the unsafe behaviour detected.\n    - **severity**: Severity level of the unsafe behaviour.\n    - **timestamp**: The Unix timestamp representing the time when the behaviour was detected.",
        "detail": "safedrive.models.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "generate_uuid_binary",
        "kind": 2,
        "importPath": "safedrive.models.unsafe_behaviour",
        "description": "safedrive.models.unsafe_behaviour",
        "peekOfCode": "def generate_uuid_binary():\n    return uuid4().bytes\nclass UnsafeBehaviour(Base):\n    \"\"\"\n    Represents the unsafe_behaviour table in the database.\n    Attributes:\n    - **id**: Unique identifier for the unsafe behaviour.\n    - **trip_id**: Foreign key to Trip model representing the trip associated with the unsafe behaviour.\n    - **location_id**: Foreign key to Location model representing the location associated with the behaviour.\n    - **behaviour_type**: Type of the unsafe behaviour detected.",
        "detail": "safedrive.models.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "AIModelInputBase",
        "kind": 6,
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "peekOfCode": "class AIModelInputBase(BaseModel):\n    \"\"\"\n    Base schema for AI Model Input entity.\n    Attributes:\n    - **trip_id**: UUID of the associated trip.\n    - **timestamp**: Timestamp of the AI model input.\n    - **date**: Date of the AI model input.\n    - **hour_of_day_mean**: Mean hour of the day.\n    - **day_of_week_mean**: Mean day of the week.\n    - **speed_std**: Standard deviation of speed.",
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInputCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "peekOfCode": "class AIModelInputCreate(AIModelInputBase):\n    \"\"\"\n    Schema for creating a new AI Model Input.\n    \"\"\"\n    pass\nclass AIModelInputUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing AI Model Input.\n    All fields are optional.\n    \"\"\"",
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInputUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "peekOfCode": "class AIModelInputUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing AI Model Input.\n    All fields are optional.\n    \"\"\"\n    timestamp: Optional[datetime] = Field(None, description=\"Timestamp of the AI model input.\")\n    date: Optional[datetime] = Field(None, description=\"Date of the AI model input.\")\n    hour_of_day_mean: Optional[float] = Field(None, description=\"Mean hour of the day.\")\n    day_of_week_mean: Optional[float] = Field(None, description=\"Mean day of the week.\")\n    speed_std: Optional[float] = Field(None, description=\"Standard deviation of speed.\")",
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AIModelInputResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.ai_model_input",
        "description": "safedrive.schemas.ai_model_input",
        "peekOfCode": "class AIModelInputResponse(AIModelInputBase):\n    \"\"\"\n    Schema for representing an AI Model Input response.\n    Inherits from AIModelInputBase and adds the `id` field.\n    \"\"\"\n    id: UUID = Field(..., description=\"UUID of the AI model input.\")\n    class Config:\n        from_attributes = True",
        "detail": "safedrive.schemas.ai_model_input",
        "documentation": {}
    },
    {
        "label": "AlcoholQuestionnaireBaseSchema",
        "kind": 6,
        "importPath": "safedrive.schemas.alcohol_questionnaire",
        "description": "safedrive.schemas.alcohol_questionnaire",
        "peekOfCode": "class AlcoholQuestionnaireBaseSchema(BaseModel):\n    id: UUID\n    driverProfileId: UUID\n    drankAlcohol: bool\n    selectedAlcoholTypes: Optional[str] = None\n    beerQuantity: Optional[str] = None\n    wineQuantity: Optional[str] = None\n    spiritsQuantity: Optional[str] = None\n    firstDrinkTime: Optional[str] = None\n    lastDrinkTime: Optional[str] = None",
        "detail": "safedrive.schemas.alcohol_questionnaire",
        "documentation": {}
    },
    {
        "label": "AlcoholQuestionnaireCreateSchema",
        "kind": 6,
        "importPath": "safedrive.schemas.alcohol_questionnaire",
        "description": "safedrive.schemas.alcohol_questionnaire",
        "peekOfCode": "class AlcoholQuestionnaireCreateSchema(BaseModel):\n    id: UUID\n    driverProfileId: UUID = Field(..., description=\"userId\")\n    drankAlcohol: bool = Field(..., description=\"drankAlcohol\")\n    selectedAlcoholTypes: Optional[str] = Field(..., description=\"selectedAlcoholTypes\")\n    beerQuantity: Optional[str] = Field(..., description=\"beerQuantity\")\n    wineQuantity: Optional[str] = Field(..., description=\"wineQuantity\")\n    spiritsQuantity: Optional[str] = Field(..., description=\"spiritsQuantity\")\n    firstDrinkTime: str = Field(..., description=\"firstDrinkTime\")\n    lastDrinkTime: str = Field(..., description=\"lastDrinkTime\")",
        "detail": "safedrive.schemas.alcohol_questionnaire",
        "documentation": {}
    },
    {
        "label": "AlcoholQuestionnaireResponseSchema",
        "kind": 6,
        "importPath": "safedrive.schemas.alcohol_questionnaire",
        "description": "safedrive.schemas.alcohol_questionnaire",
        "peekOfCode": "class AlcoholQuestionnaireResponseSchema(AlcoholQuestionnaireBaseSchema):\n    pass",
        "detail": "safedrive.schemas.alcohol_questionnaire",
        "documentation": {}
    },
    {
        "label": "CauseBase",
        "kind": 6,
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "peekOfCode": "class CauseBase(BaseModel):\n    \"\"\"\n    Base schema for Cause containing common attributes.\n    Attributes:\n    - **id**: Unique identifier for the cause.\n    - **unsafe_behaviour_id**: Identifier of the associated \n    unsafe behavior.\n    - **name**: Description of the cause.\n    - **influence**: Indicates if the cause is influential.\n    - **created_at**: Creation timestamp.",
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "CauseCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "peekOfCode": "class CauseCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new Cause.\n    Attributes:\n    - **unsafe_behaviour_id**: Identifier of the associated unsafe behavior.\n    - **name**: Description of the cause.\n    - **influence**: Indicates if the cause is influential.\n    - **created_at**: Creation timestamp.\n    \"\"\"\n    unsafe_behaviour_id: UUID",
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "CauseUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "peekOfCode": "class CauseUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing Cause.\n    Attributes:\n    - **name**: Optionally update the cause description.\n    - **influence**: Optionally update the influence status.\n    - **updated_at**: Optionally update the timestamp for last update.\n    \"\"\"\n    name: Optional[str] = None\n    influence: Optional[bool] = None",
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "CauseResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.cause",
        "description": "safedrive.schemas.cause",
        "peekOfCode": "class CauseResponse(CauseBase):\n    \"\"\"\n    Response schema for Cause, inheriting from CauseBase.\n    \"\"\"\n    pass",
        "detail": "safedrive.schemas.cause",
        "documentation": {}
    },
    {
        "label": "DriverProfileBase",
        "kind": 6,
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "peekOfCode": "class DriverProfileBase(BaseModel):\n    \"\"\"\n    Base schema for DriverProfile, including common attributes.\n    \"\"\"\n    driverProfileId: UUID\n    email: str\n    sync: bool\n    class Config:\n        from_attributes = True\nclass DriverProfileOut(BaseModel):",
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfileOut",
        "kind": 6,
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "peekOfCode": "class DriverProfileOut(BaseModel):\n    driverProfileId: UUID\n    email: str\n    # A list of trips, each containing raw sensor data\n    trips: List[TripOut] = []\n    class Config:\n        from_attributes = True\nclass DriverProfileCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new DriverProfile.",
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfileCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "peekOfCode": "class DriverProfileCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new DriverProfile.\n    Attributes:\n    - **driverProfileId**: The driver's profile Id\n    - **email**: The driver's email (unique).\n    - **sync**: Indicates if data is synced (optional).\n    \"\"\"\n    driverProfileId: UUID\n    email: str",
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfileUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "peekOfCode": "class DriverProfileUpdate(BaseModel):\n    \"\"\"\n    Schema for updating a DriverProfile.\n    Attributes:\n    - **email**: Optionally updated email.\n    - **sync**: Optionally updated sync status.\n    \"\"\"\n    email: Optional[str] = None\n    sync: Optional[bool] = None\nclass DriverProfileResponse(DriverProfileBase):",
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DriverProfileResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.driver_profile",
        "description": "safedrive.schemas.driver_profile",
        "peekOfCode": "class DriverProfileResponse(DriverProfileBase):\n    \"\"\"\n    Response schema for DriverProfile, with UUID conversion for JSON responses.\n    \"\"\"\n    driverProfileId: UUID\n    email: str\n    sync: bool\n    @validator(\"driverProfileId\", pre=True, always=True)\n    def convert_driver_profile_id(cls, v):\n        if isinstance(v, bytes):",
        "detail": "safedrive.schemas.driver_profile",
        "documentation": {}
    },
    {
        "label": "DrivingTipBase",
        "kind": 6,
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "peekOfCode": "class DrivingTipBase(BaseModel):\n    \"\"\"\n    Base schema for DrivingTip containing common attributes.\n    Attributes:\n    - **tip_id**: Unique identifier for the driving tip.\n    - **title**: Title of the driving tip.\n    - **meaning**: Explanation of the tip's meaning.\n    - **penalty**: Penalty details, if applicable.\n    - **fine**: Fine amount associated with the tip.\n    - **law**: Related law to the tip.",
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "DrivingTipCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "peekOfCode": "class DrivingTipCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new DrivingTip.\n    \"\"\"\n    tip_id: UUID\n    title: str\n    meaning: Optional[str] = None\n    penalty: Optional[str] = None\n    fine: Optional[str] = None\n    law: Optional[str] = None",
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "DrivingTipUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "peekOfCode": "class DrivingTipUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing DrivingTip.\n    \"\"\"\n    title: Optional[str] = None\n    meaning: Optional[str] = None\n    penalty: Optional[str] = None\n    fine: Optional[str] = None\n    law: Optional[str] = None\n    hostility: Optional[str] = None",
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "DrivingTipResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.driving_tip_sch",
        "description": "safedrive.schemas.driving_tip_sch",
        "peekOfCode": "class DrivingTipResponse(DrivingTipBase):\n    \"\"\"\n    Response schema for DrivingTip.\n    \"\"\"\n    pass",
        "detail": "safedrive.schemas.driving_tip_sch",
        "documentation": {}
    },
    {
        "label": "EmbeddingBase",
        "kind": 6,
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "peekOfCode": "class EmbeddingBase(BaseModel):\n    chunk_id: UUID\n    chunk_text: str\n    embedding: str\n    source_type: str\n    source_page: int\n    created_at: datetime\n    synced: bool\n    class Config:\n        from_attributes = True",
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "EmbeddingCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "peekOfCode": "class EmbeddingCreate(BaseModel):\n    chunk_text: str\n    embedding: str\n    source_type: str\n    source_page: int\n    synced: Optional[bool] = False\nclass EmbeddingUpdate(BaseModel):\n    chunk_text: Optional[str] = None\n    embedding: Optional[str] = None\n    source_type: Optional[str] = None",
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "EmbeddingUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "peekOfCode": "class EmbeddingUpdate(BaseModel):\n    chunk_text: Optional[str] = None\n    embedding: Optional[str] = None\n    source_type: Optional[str] = None\n    source_page: Optional[int] = None\n    synced: Optional[bool] = None\nclass EmbeddingResponse(EmbeddingBase):\n    pass",
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "EmbeddingResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.embedding",
        "description": "safedrive.schemas.embedding",
        "peekOfCode": "class EmbeddingResponse(EmbeddingBase):\n    pass",
        "detail": "safedrive.schemas.embedding",
        "documentation": {}
    },
    {
        "label": "LocationBase",
        "kind": 6,
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "peekOfCode": "class LocationBase(BaseModel):\n    \"\"\"\n    Base schema for the Location model.\n    Attributes:\n    - **id**: The unique identifier for each location entry.\n    - **latitude**: The latitude coordinate of the location.\n    - **longitude**: The longitude coordinate of the location.\n    - **timestamp**: The timestamp indicating when the location data was recorded (epoch milliseconds).\n    - **date**: The date corresponding to the location data.\n    - **altitude**: The altitude of the location in meters.",
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "LocationCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "peekOfCode": "class LocationCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new Location record.\n    \"\"\"\n    id: UUID=Field(..., description=\"The unique identifier for each location entry.\")\n    latitude: float = Field(..., description=\"The latitude coordinate of the location.\")\n    longitude: float = Field(..., description=\"The longitude coordinate of the location.\")\n    timestamp: int = Field(..., description=\"The timestamp when the location data was recorded (epoch milliseconds).\")\n    date: datetime = Field(..., description=\"The date corresponding to the location data.\")\n    altitude: float = Field(..., description=\"The altitude of the location in meters.\")",
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "LocationUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "peekOfCode": "class LocationUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing Location record.\n    All fields are optional.\n    \"\"\"\n    latitude: Optional[float] = Field(None, description=\"Optionally update the latitude of the location.\")\n    longitude: Optional[float] = Field(None, description=\"Optionally update the longitude of the location.\")\n    timestamp: Optional[int] = Field(None, description=\"Optionally update the timestamp of the location.\")\n    date: Optional[datetime] = Field(None, description=\"Optionally update the date of the location.\")\n    altitude: Optional[float] = Field(None, description=\"Optionally update the altitude.\")",
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "LocationResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.location",
        "description": "safedrive.schemas.location",
        "peekOfCode": "class LocationResponse(LocationBase):\n    \"\"\"\n    Schema for the response format of a Location record.\n    \"\"\"\n    pass",
        "detail": "safedrive.schemas.location",
        "documentation": {}
    },
    {
        "label": "NLGReportBase",
        "kind": 6,
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "peekOfCode": "class NLGReportBase(BaseModel):\n    \"\"\"\n    Base schema for NLG Report.\n    Attributes:\n    - **id**: Unique identifier for the report.\n    - **user_id**: Identifier for the user who generated the report.\n    - **report_text**: Full text content of the report.\n    - **generated_at**: Generation date and time of the report.\n    - **synced**: Indicates if the report has been synced.\n    \"\"\"",
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReportCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "peekOfCode": "class NLGReportCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new NLG Report.\n    Attributes:\n    -**id**: Idenifier for the particular nlg report\n    - **user_id**: Identifier for the user who generated the report.\n    - **report_text**: Text content of the report.\n    - **generated_at**: Generation date and time of the report.\n    - **synced**: Boolean indicating if the report has been synced.\n    \"\"\"",
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReportUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "peekOfCode": "class NLGReportUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing NLG Report.\n    Attributes:\n    - **report_text**: Optional update to the report content.\n    - **synced**: Optional update to sync status.\n    \"\"\"\n    report_text: Optional[str] = None\n    sync: Optional[bool] = None\n    class Config:",
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "NLGReportResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.nlg_report",
        "description": "safedrive.schemas.nlg_report",
        "peekOfCode": "class NLGReportResponse(NLGReportBase):\n    \"\"\"\n    Schema for NLG Report response format, inherits from NLGReportBase.\n    \"\"\"\n    pass",
        "detail": "safedrive.schemas.nlg_report",
        "documentation": {}
    },
    {
        "label": "RawSensorDataBase",
        "kind": 6,
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "peekOfCode": "class RawSensorDataBase(BaseModel):\n    \"\"\"\n    Base schema for the Raw Sensor Data model.\n    Attributes:\n    - **id**: The unique identifier for the sensor data record.\n    - **sensor_type**: The type of sensor (e.g., accelerometer, gyroscope).\n    - **sensor_type_name**: The name of the sensor type.\n    - **values**: A list of sensor readings.\n    - **timestamp**: The timestamp when the data was recorded.\n    - **date**: The date when the data was recorded.",
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorDataOut",
        "kind": 6,
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "peekOfCode": "class RawSensorDataOut(BaseModel):\n    id: UUID = Field(...)\n    # ... other fields you want to expose\n    class Config:\n        # In Pydantic v2, 'orm_mode' is replaced by:\n        # (or) model_config = ConfigDict(from_attributes=True)\n        from_attributes = True\nclass RawSensorDataCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new Raw Sensor Data record.",
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorDataCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "peekOfCode": "class RawSensorDataCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new Raw Sensor Data record.\n    \"\"\"\n    id: UUID=Field(..., description=\"The identifier for a particular raw_sensor instance\")\n    sensor_type: int = Field(..., description=\"The type of sensor (e.g., accelerometer, gyroscope).\")\n    sensor_type_name: str = Field(..., description=\"The name of the sensor type.\")\n    values: List[float] = Field(..., description=\"A list of sensor readings.\")\n    timestamp: int = Field(..., description=\"The timestamp when the data was recorded.\")\n    date: Optional[datetime] = Field(None, description=\"The date when the data was recorded.\")",
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorDataUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "peekOfCode": "class RawSensorDataUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing Raw Sensor Data record.\n    All fields are optional.\n    \"\"\"\n    sensor_type: Optional[int] = Field(None, description=\"Optionally update the type of sensor.\")\n    sensor_type_name: Optional[str] = Field(None, description=\"Optionally update the name of the sensor type.\")\n    values: Optional[List[float]] = Field(None, description=\"Optionally update the sensor readings.\")\n    timestamp: Optional[int] = Field(None, description=\"Optionally update the timestamp when the data was recorded.\")\n    date: Optional[datetime] = Field(None, description=\"Optionally update the date when the data was recorded.\")",
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RawSensorDataResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.raw_sensor_data",
        "description": "safedrive.schemas.raw_sensor_data",
        "peekOfCode": "class RawSensorDataResponse(RawSensorDataBase):\n    \"\"\"\n    Schema for the response format of a Raw Sensor Data record.\n    \"\"\"\n    pass",
        "detail": "safedrive.schemas.raw_sensor_data",
        "documentation": {}
    },
    {
        "label": "RoadBase",
        "kind": 6,
        "importPath": "safedrive.schemas.road",
        "description": "safedrive.schemas.road",
        "peekOfCode": "class RoadBase(BaseModel):\n    \"\"\"\n    Base schema for Road.\n    Attributes:\n    - **id**: Unique identifier for the road.\n    - **driverProfileId**: Identifier for the driver profile.\n    - **name**: The road's name.\n    - **roadType**: The type of the road (e.g., residential, primary).\n    - **speedLimit**: Speed limit of the road.\n    - **latitude**: Geographic latitude.",
        "detail": "safedrive.schemas.road",
        "documentation": {}
    },
    {
        "label": "RoadCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.road",
        "description": "safedrive.schemas.road",
        "peekOfCode": "class RoadCreate(RoadBase):\n    \"\"\"\n    Schema for creating a new Road entry.\n    \"\"\"\n    pass  # Inherits all fields from RoadBase; adjust if needed.\nclass RoadUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing Road entry.\n    All fields are optional for partial updates.\n    \"\"\"",
        "detail": "safedrive.schemas.road",
        "documentation": {}
    },
    {
        "label": "RoadUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.road",
        "description": "safedrive.schemas.road",
        "peekOfCode": "class RoadUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing Road entry.\n    All fields are optional for partial updates.\n    \"\"\"\n    name: Optional[str] = None\n    roadType: Optional[str] = None\n    speedLimit: Optional[int] = None\n    latitude: Optional[float] = None\n    longitude: Optional[float] = None",
        "detail": "safedrive.schemas.road",
        "documentation": {}
    },
    {
        "label": "RoadResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.road",
        "description": "safedrive.schemas.road",
        "peekOfCode": "class RoadResponse(RoadBase):\n    \"\"\"\n    Schema for Road response format, inherits from RoadBase.\n    \"\"\"\n    pass",
        "detail": "safedrive.schemas.road",
        "documentation": {}
    },
    {
        "label": "TripBase",
        "kind": 6,
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "peekOfCode": "class TripBase(BaseModel):\n    \"\"\"\n    Base schema for the Trip model.\n    Attributes:\n    - **id**: The unique identifier for the trip.\n    - **driverProfileId**: The foreign key reference to the driver's profile.\n    - **start_date**: The start date of the trip.\n    - **end_date**: The end date of the trip.\n    - **start_time**: The start time of the trip in epoch milliseconds.\n    - **end_time**: The end time of the trip in epoch milliseconds.",
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "TripOut",
        "kind": 6,
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "peekOfCode": "class TripOut(BaseModel):\n    id: UUID\n    driverProfileId: UUID\n    # We'll store a limited set of raw sensor data here\n    raw_sensor_data: List[RawSensorDataOut] = []\n    class Config:\n        from_attributes = True\nclass TripCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new Trip record.",
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "TripCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "peekOfCode": "class TripCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new Trip record.\n    \"\"\"\n    id: UUID=Field(..., description=\"The UUID of the trip's profile.\")\n    driverProfileId: UUID = Field(..., description=\"The UUID of the driver's profile.\")\n    start_date: Optional[datetime] = Field(None, description=\"The start date of the trip.\")\n    end_date: Optional[datetime] = Field(None, description=\"The end date of the trip.\")\n    start_time: int = Field(..., description=\"The start time of the trip in epoch milliseconds.\")\n    end_time: Optional[int] = Field(None, description=\"The end time of the trip in epoch milliseconds.\")",
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "TripUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "peekOfCode": "class TripUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing Trip record.\n    All fields are optional.\n    \"\"\"\n    driverProfileId: Optional[UUID] = Field(None, description=\"Optionally update the driver's profile reference.\")\n    start_date: Optional[datetime] = Field(None, description=\"Optionally update the start date of the trip.\")\n    end_date: Optional[datetime] = Field(None, description=\"Optionally update the end date of the trip.\")\n    start_time: Optional[int] = Field(None, description=\"Optionally update the start time of the trip in epoch milliseconds.\")\n    end_time: Optional[int] = Field(None, description=\"Optionally update the end time of the trip in epoch milliseconds.\")",
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "TripResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.trip",
        "description": "safedrive.schemas.trip",
        "peekOfCode": "class TripResponse(TripBase):\n    \"\"\"\n    Schema for the response format of a Trip record.\n    \"\"\"\n    pass",
        "detail": "safedrive.schemas.trip",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourBase",
        "kind": 6,
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "peekOfCode": "class UnsafeBehaviourBase(BaseModel):\n    \"\"\"\n    Base schema for Unsafe Behaviour data.\n    Attributes:\n    - **id**: Unique identifier for the unsafe behaviour.\n    - **trip_id**: UUID of the trip associated with this unsafe behaviour.\n    - **location_id**: UUID of the location associated with this behaviour.\n    - **behaviour_type**: Type of unsafe behaviour observed (e.g., speeding, harsh braking).\n    - **severity**: Severity level of the unsafe behaviour.\n    - **timestamp**: Epoch timestamp when the behaviour was recorded.",
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourCreate",
        "kind": 6,
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "peekOfCode": "class UnsafeBehaviourCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new Unsafe Behaviour record.\n    \"\"\"\n    trip_id: UUID = Field(..., description=\"UUID of the trip associated with this unsafe behaviour.\")\n    location_id: Optional[UUID] = Field(None, description=\"UUID of the location associated with this behaviour.\")\n    driverProfileId: UUID = Field(..., description=\"UUID of the driving profile associated with this unsafe behaviour.\")\n    behaviour_type: str = Field(..., description=\"Type of unsafe behaviour observed.\")\n    severity: float = Field(..., description=\"Severity level of the unsafe behaviour.\")\n    timestamp: int = Field(..., description=\"Epoch timestamp when the behaviour was recorded.\")",
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourUpdate",
        "kind": 6,
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "peekOfCode": "class UnsafeBehaviourUpdate(BaseModel):\n    \"\"\"\n    Schema for updating an existing Unsafe Behaviour record.\n    All fields are optional.\n    \"\"\"\n    location_id: Optional[UUID] = Field(None, description=\"Optionally update the location associated with this behaviour.\")\n    trip_id: UUID = Field(..., description=\"UUID of the trip associated with this unsafe behaviour.\")\n    driverProfileId: UUID = Field(..., description=\"UUID of the driving profile associated with this unsafe behaviour.\")\n    behaviour_type: Optional[str] = Field(None, description=\"Optionally update the type of unsafe behaviour.\")\n    severity: Optional[float] = Field(None, description=\"Optionally update the severity level.\")",
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "UnsafeBehaviourResponse",
        "kind": 6,
        "importPath": "safedrive.schemas.unsafe_behaviour",
        "description": "safedrive.schemas.unsafe_behaviour",
        "peekOfCode": "class UnsafeBehaviourResponse(UnsafeBehaviourBase):\n    \"\"\"\n    Schema for the response format of Unsafe Behaviour data.\n    \"\"\"\n    pass",
        "detail": "safedrive.schemas.unsafe_behaviour",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass\n        tee_f.write(what)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info[0],\n        sys.version_info[1],\n        suffix,",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(\"-> %s\\\\%s[%s]=%r\" % (root_key_name, key_name, value_name, value))\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(\"-> DELETE %s\\\\%s[%s]\" % (root_key_name, key_name, value_name))\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n        like file_created to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(\"Failed to unregister COM objects: %s\" % (why,))\n    try:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location):\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError('Path \"{}\" does not exist!'.format(location))\n    return location\ndef main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install\n    If you installed pywin32 via a .exe installer, this should be run\n    automatically after installation, but if it fails you can run it again.\n    If you installed pywin32 via PIP, you almost certainly need to run this to",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(os.path.join(tempfile.gettempdir(), \"pywin32_postinstall.log\"), \"w\")\nclass Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True\nexcept NameError:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(\"*** Test script '%s' exited with %s\" % (script, result.returncode))\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [this_dir] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "this_dir",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "this_dir = os.path.dirname(__file__)\nsite_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "loglevel",
        "kind": 5,
        "importPath": "gunicorn.conf",
        "description": "gunicorn.conf",
        "peekOfCode": "loglevel = 'info'\naccesslog = '-'       # Send access logs to stdout\nerrorlog = '-'        # Send error logs to stderr\ncapture_output = True # Capture worker stdout/stderr\nenable_stdio_inheritance = True\n# Optionally, configure Python logging here as well\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s %(levelname)s [%(name)s] %(message)s\"\n)",
        "detail": "gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "accesslog",
        "kind": 5,
        "importPath": "gunicorn.conf",
        "description": "gunicorn.conf",
        "peekOfCode": "accesslog = '-'       # Send access logs to stdout\nerrorlog = '-'        # Send error logs to stderr\ncapture_output = True # Capture worker stdout/stderr\nenable_stdio_inheritance = True\n# Optionally, configure Python logging here as well\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s %(levelname)s [%(name)s] %(message)s\"\n)",
        "detail": "gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "errorlog",
        "kind": 5,
        "importPath": "gunicorn.conf",
        "description": "gunicorn.conf",
        "peekOfCode": "errorlog = '-'        # Send error logs to stderr\ncapture_output = True # Capture worker stdout/stderr\nenable_stdio_inheritance = True\n# Optionally, configure Python logging here as well\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s %(levelname)s [%(name)s] %(message)s\"\n)",
        "detail": "gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "capture_output",
        "kind": 5,
        "importPath": "gunicorn.conf",
        "description": "gunicorn.conf",
        "peekOfCode": "capture_output = True # Capture worker stdout/stderr\nenable_stdio_inheritance = True\n# Optionally, configure Python logging here as well\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s %(levelname)s [%(name)s] %(message)s\"\n)",
        "detail": "gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "enable_stdio_inheritance",
        "kind": 5,
        "importPath": "gunicorn.conf",
        "description": "gunicorn.conf",
        "peekOfCode": "enable_stdio_inheritance = True\n# Optionally, configure Python logging here as well\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s %(levelname)s [%(name)s] %(message)s\"\n)",
        "detail": "gunicorn.conf",
        "documentation": {}
    },
    {
        "label": "ENVIRONMENT",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "ENVIRONMENT = os.getenv(\"ENVIRONMENT\", \"development\")\nif ENVIRONMENT == \"development\":\n    dotenv.load_dotenv()\n# Create FastAPI app\napp = FastAPI(\n    title=\"Safe Drive API\",\n    description=\"This is an API powering Safe Drive Africa, a PhD research app\",\n    version=\"1.0.0\",\n    docs_url=\"/docs\",      # Ensure this is not set to None\n    redoc_url=\"/redoc\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(\n    title=\"Safe Drive API\",\n    description=\"This is an API powering Safe Drive Africa, a PhD research app\",\n    version=\"1.0.0\",\n    docs_url=\"/docs\",      # Ensure this is not set to None\n    redoc_url=\"/redoc\"\n)\n# Example usage of environment variables\nDATABASE_URL = os.getenv(\"DATABASE_URL\")\nSECRET_KEY = os.getenv(\"SECRET_KEY\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "DATABASE_URL = os.getenv(\"DATABASE_URL\")\nSECRET_KEY = os.getenv(\"SECRET_KEY\")\nDEBUG = os.getenv(\"DEBUG\") == \"True\"\n# Include API router\napp.include_router(api_router)\n# Define allowed CORS origins\norigins = [\n    \"https://api.safedriveafrica.com\",\n    \"http://api.safedriveafrica.com\",\n    \"https://datahub.safedriveafrica.com\",",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "SECRET_KEY = os.getenv(\"SECRET_KEY\")\nDEBUG = os.getenv(\"DEBUG\") == \"True\"\n# Include API router\napp.include_router(api_router)\n# Define allowed CORS origins\norigins = [\n    \"https://api.safedriveafrica.com\",\n    \"http://api.safedriveafrica.com\",\n    \"https://datahub.safedriveafrica.com\",\n    \"http://datahub.safedriveafrica.com\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "DEBUG = os.getenv(\"DEBUG\") == \"True\"\n# Include API router\napp.include_router(api_router)\n# Define allowed CORS origins\norigins = [\n    \"https://api.safedriveafrica.com\",\n    \"http://api.safedriveafrica.com\",\n    \"https://datahub.safedriveafrica.com\",\n    \"http://datahub.safedriveafrica.com\"\n    # Add other origins if necessary",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "origins = [\n    \"https://api.safedriveafrica.com\",\n    \"http://api.safedriveafrica.com\",\n    \"https://datahub.safedriveafrica.com\",\n    \"http://datahub.safedriveafrica.com\"\n    # Add other origins if necessary\n]\n# Add CORS Middleware\napp.add_middleware(\n    CORSMiddleware,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ALEMBIC_CONFIG_PATH",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "ALEMBIC_CONFIG_PATH = \"./alembic.ini\"\n# for route in app.routes:\n#     print(route.path, route.name)\n# @app.on_event(\"startup\")\n# async def on_startup():\n#     # Run Alembic migrations programmatically\n#     alembic_cfg = Config(ALEMBIC_CONFIG_PATH)\n#     alembic_cfg.set_main_option(\"sqlalchemy.url\", os.getenv(\"DATABASE_URL\"))\n#     print(\"Running Alembic migrations...\")\n#     command.upgrade(alembic_cfg, \"head\")  # Upgrade database schema to latest",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "player1",
        "kind": 2,
        "importPath": "stud",
        "description": "stud",
        "peekOfCode": "def player1():\n  target_num=random.randint(-100, 100)\n  print(\"Target number: \", target_num)\ndef player1():\n    target_number=random.randint(-100, 100)\n    print(target_number)\n    #return target_number\ndef player2():\n    guess_number=int(input(\"Please guess the number: \"))\n    print(guess_number)",
        "detail": "stud",
        "documentation": {}
    },
    {
        "label": "player1",
        "kind": 2,
        "importPath": "stud",
        "description": "stud",
        "peekOfCode": "def player1():\n    target_number=random.randint(-100, 100)\n    print(target_number)\n    #return target_number\ndef player2():\n    guess_number=int(input(\"Please guess the number: \"))\n    print(guess_number)\n    return guess_number\ndef check_guess(guess_number, target_number):\n    if guess_number<target_number:",
        "detail": "stud",
        "documentation": {}
    },
    {
        "label": "player2",
        "kind": 2,
        "importPath": "stud",
        "description": "stud",
        "peekOfCode": "def player2():\n    guess_number=int(input(\"Please guess the number: \"))\n    print(guess_number)\n    return guess_number\ndef check_guess(guess_number, target_number):\n    if guess_number<target_number:\n      print(\"Higher\")\n      return \"higher\"\n    elif guess_number>target_number:\n      print(\"Lower\")",
        "detail": "stud",
        "documentation": {}
    },
    {
        "label": "check_guess",
        "kind": 2,
        "importPath": "stud",
        "description": "stud",
        "peekOfCode": "def check_guess(guess_number, target_number):\n    if guess_number<target_number:\n      print(\"Higher\")\n      return \"higher\"\n    elif guess_number>target_number:\n      print(\"Lower\")\n      return \"lower\"\n    else:\n      print(\"Correct\")\n      return \"correct\"",
        "detail": "stud",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "stud",
        "description": "stud",
        "peekOfCode": "def main():\n  target_number=player1()\n  guess_number=0\n  round=5\n  for num in range(5):\n      guess_number=player2(guess_number=int(input(\"Please guess the number: \")))\n      #guess_count +=1\n    #result=check_guess(guess_number, target_number)\n      if result==\"correct\":\n        print(f\"You have guessed the correct number in: {num} attempts. \")",
        "detail": "stud",
        "documentation": {}
    }
]