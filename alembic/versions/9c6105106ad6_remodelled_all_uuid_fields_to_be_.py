"""Remodelled all UUID fields to be UUIDType(binary=True)

Revision ID: 9c6105106ad6
Revises: 
Create Date: 2025-01-09 10:56:45.688271

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils


# revision identifiers, used by Alembic.
revision: str = '9c6105106ad6'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('driver_profile',
    sa.Column('driverProfileId', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('email', sa.String(length=50), nullable=False),
    sa.Column('sync', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('driverProfileId'),
    sa.UniqueConstraint('email')
    )
    op.create_table('embedding',
    sa.Column('chunk_id', sa.BINARY(length=16), nullable=False),
    sa.Column('chunk_text', sa.String(length=255), nullable=False),
    sa.Column('embedding', sa.String(length=1024), nullable=False),
    sa.Column('source_type', sa.String(length=50), nullable=False),
    sa.Column('source_page', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('synced', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('chunk_id')
    )
    op.create_table('location',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('latitude', sa.Float(), nullable=False),
    sa.Column('longitude', sa.Float(), nullable=False),
    sa.Column('timestamp', sa.Integer(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('altitude', sa.Float(), nullable=False),
    sa.Column('speed', sa.Float(), nullable=False),
    sa.Column('distance', sa.Float(), nullable=False),
    sa.Column('sync', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('driving_tips',
    sa.Column('tip_id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('meaning', sa.String(length=255), nullable=True),
    sa.Column('penalty', sa.String(length=255), nullable=True),
    sa.Column('fine', sa.String(length=255), nullable=True),
    sa.Column('law', sa.String(length=255), nullable=True),
    sa.Column('hostility', sa.String(length=255), nullable=True),
    sa.Column('summary_tip', sa.String(length=255), nullable=True),
    sa.Column('sync', sa.Boolean(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('profile_id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('llm', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['profile_id'], ['driver_profile.driverProfileId'], ),
    sa.PrimaryKeyConstraint('tip_id')
    )
    op.create_table('nlg_report',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('driverProfileId', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('report_text', sa.String(length=500), nullable=False),
    sa.Column('generated_at', sa.DateTime(), nullable=False),
    sa.Column('synced', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['driverProfileId'], ['driver_profile.driverProfileId'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('trip',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('driverProfileId', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('start_time', sa.BigInteger(), nullable=True),
    sa.Column('end_time', sa.BigInteger(), nullable=True),
    sa.Column('synced', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['driverProfileId'], ['driver_profile.driverProfileId'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ai_model_inputs',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('trip_id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('hour_of_day_mean', sa.Float(), nullable=False),
    sa.Column('day_of_week_mean', sa.Float(), nullable=False),
    sa.Column('speed_std', sa.Float(), nullable=False),
    sa.Column('course_std', sa.Float(), nullable=False),
    sa.Column('acceleration_y_original_mean', sa.Float(), nullable=False),
    sa.Column('synced', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['trip_id'], ['trip.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('raw_sensor_data',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('sensor_type', sa.Integer(), nullable=False),
    sa.Column('sensor_type_name', sa.String(length=255), nullable=False),
    sa.Column('values', sa.JSON(), nullable=False),
    sa.Column('timestamp', sa.Integer(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('accuracy', sa.Integer(), nullable=False),
    sa.Column('location_id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
    sa.Column('trip_id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
    sa.Column('sync', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['location.id'], ),
    sa.ForeignKeyConstraint(['trip_id'], ['trip.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('unsafe_behaviour',
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('trip_id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
    sa.Column('driverProfileId', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('location_id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
    sa.Column('behaviour_type', sa.String(length=255), nullable=False),
    sa.Column('severity', sa.Float(), nullable=False),
    sa.Column('timestamp', sa.Integer(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated', sa.Boolean(), nullable=True),
    sa.Column('synced', sa.Boolean(), nullable=True),
    sa.Column('alcohol_influence', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['driverProfileId'], ['driver_profile.driverProfileId'], ),
    sa.ForeignKeyConstraint(['location_id'], ['location.id'], ),
    sa.ForeignKeyConstraint(['trip_id'], ['trip.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('causes',
    sa.Column('id', sa.BINARY(length=16), nullable=False),
    sa.Column('unsafe_behaviour_id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('influence', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('synced', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['unsafe_behaviour_id'], ['unsafe_behaviour.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('causes')
    op.drop_table('unsafe_behaviour')
    op.drop_table('raw_sensor_data')
    op.drop_table('ai_model_inputs')
    op.drop_table('trip')
    op.drop_table('nlg_report')
    op.drop_table('driving_tips')
    op.drop_table('location')
    op.drop_table('embedding')
    op.drop_table('driver_profile')
    # ### end Alembic commands ###
